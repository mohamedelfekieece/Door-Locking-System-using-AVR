
SYSTEM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002a04  00002a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800076  00800076  00002aae  2**0
                  ALLOC
  3 .stab         00002c88  00000000  00000000  00002ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013a7  00000000  00000000  00005738  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000089d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000098c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a670  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aa5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b22b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <main>
      8a:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:
/*
 * description
 * initialize buzzer PIN as output
*/

void BUZZER_init() {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(BUZZER_OUTPUT_PORT, BUZZER_OUTPUT_PIN, PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 68 06 	call	0xcd0	; 0xcd0 <GPIO_setupPinDirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <BUZZER_on>:
 * Turn on buzzer
 */



void BUZZER_on() {
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_OUTPUT_PORT, BUZZER_OUTPUT_PIN, LOGIC_HIGH);
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	62 e0       	ldi	r22, 0x02	; 2
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <BUZZER_off>:
/*
 * description
 * Turn off buzzer
 */
void BUZZER_off() {
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_OUTPUT_PORT, BUZZER_OUTPUT_PIN, LOGIC_LOW);
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	62 e0       	ldi	r22, 0x02	; 2
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	00 d0       	rcall	.+0      	; 0xb94 <EEPROM_writeByte+0x6>
     b94:	00 d0       	rcall	.+0      	; 0xb96 <EEPROM_writeByte+0x8>
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	9a 83       	std	Y+2, r25	; 0x02
     b9c:	89 83       	std	Y+1, r24	; 0x01
     b9e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     ba0:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     ba4:	0e 94 31 13 	call	0x2662	; 0x2662 <TWI_getStatus>
     ba8:	88 30       	cpi	r24, 0x08	; 8
     baa:	11 f0       	breq	.+4      	; 0xbb0 <EEPROM_writeByte+0x22>
        return ERROR;
     bac:	1c 82       	std	Y+4, r1	; 0x04
     bae:	28 c0       	rjmp	.+80     	; 0xc00 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	9a 81       	ldd	r25, Y+2	; 0x02
     bb4:	80 70       	andi	r24, 0x00	; 0
     bb6:	97 70       	andi	r25, 0x07	; 7
     bb8:	88 0f       	add	r24, r24
     bba:	89 2f       	mov	r24, r25
     bbc:	88 1f       	adc	r24, r24
     bbe:	99 0b       	sbc	r25, r25
     bc0:	91 95       	neg	r25
     bc2:	80 6a       	ori	r24, 0xA0	; 160
     bc4:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     bc8:	0e 94 31 13 	call	0x2662	; 0x2662 <TWI_getStatus>
     bcc:	88 31       	cpi	r24, 0x18	; 24
     bce:	11 f0       	breq	.+4      	; 0xbd4 <EEPROM_writeByte+0x46>
        return ERROR; 
     bd0:	1c 82       	std	Y+4, r1	; 0x04
     bd2:	16 c0       	rjmp	.+44     	; 0xc00 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     bda:	0e 94 31 13 	call	0x2662	; 0x2662 <TWI_getStatus>
     bde:	88 32       	cpi	r24, 0x28	; 40
     be0:	11 f0       	breq	.+4      	; 0xbe6 <EEPROM_writeByte+0x58>
        return ERROR;
     be2:	1c 82       	std	Y+4, r1	; 0x04
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     bec:	0e 94 31 13 	call	0x2662	; 0x2662 <TWI_getStatus>
     bf0:	88 32       	cpi	r24, 0x28	; 40
     bf2:	11 f0       	breq	.+4      	; 0xbf8 <EEPROM_writeByte+0x6a>
        return ERROR;
     bf4:	1c 82       	std	Y+4, r1	; 0x04
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     bf8:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <TWI_stop>
	
    return SUCCESS;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	8c 83       	std	Y+4, r24	; 0x04
     c00:	8c 81       	ldd	r24, Y+4	; 0x04
}
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	cf 91       	pop	r28
     c0c:	df 91       	pop	r29
     c0e:	08 95       	ret

00000c10 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	00 d0       	rcall	.+0      	; 0xc16 <EEPROM_readByte+0x6>
     c16:	00 d0       	rcall	.+0      	; 0xc18 <EEPROM_readByte+0x8>
     c18:	0f 92       	push	r0
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	9a 83       	std	Y+2, r25	; 0x02
     c20:	89 83       	std	Y+1, r24	; 0x01
     c22:	7c 83       	std	Y+4, r23	; 0x04
     c24:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c26:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     c2a:	0e 94 31 13 	call	0x2662	; 0x2662 <TWI_getStatus>
     c2e:	88 30       	cpi	r24, 0x08	; 8
     c30:	11 f0       	breq	.+4      	; 0xc36 <EEPROM_readByte+0x26>
        return ERROR;
     c32:	1d 82       	std	Y+5, r1	; 0x05
     c34:	44 c0       	rjmp	.+136    	; 0xcbe <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	80 70       	andi	r24, 0x00	; 0
     c3c:	97 70       	andi	r25, 0x07	; 7
     c3e:	88 0f       	add	r24, r24
     c40:	89 2f       	mov	r24, r25
     c42:	88 1f       	adc	r24, r24
     c44:	99 0b       	sbc	r25, r25
     c46:	91 95       	neg	r25
     c48:	80 6a       	ori	r24, 0xA0	; 160
     c4a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     c4e:	0e 94 31 13 	call	0x2662	; 0x2662 <TWI_getStatus>
     c52:	88 31       	cpi	r24, 0x18	; 24
     c54:	11 f0       	breq	.+4      	; 0xc5a <EEPROM_readByte+0x4a>
        return ERROR;
     c56:	1d 82       	std	Y+5, r1	; 0x05
     c58:	32 c0       	rjmp	.+100    	; 0xcbe <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c60:	0e 94 31 13 	call	0x2662	; 0x2662 <TWI_getStatus>
     c64:	88 32       	cpi	r24, 0x28	; 40
     c66:	11 f0       	breq	.+4      	; 0xc6c <EEPROM_readByte+0x5c>
        return ERROR;
     c68:	1d 82       	std	Y+5, r1	; 0x05
     c6a:	29 c0       	rjmp	.+82     	; 0xcbe <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     c6c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     c70:	0e 94 31 13 	call	0x2662	; 0x2662 <TWI_getStatus>
     c74:	80 31       	cpi	r24, 0x10	; 16
     c76:	11 f0       	breq	.+4      	; 0xc7c <EEPROM_readByte+0x6c>
        return ERROR;
     c78:	1d 82       	std	Y+5, r1	; 0x05
     c7a:	21 c0       	rjmp	.+66     	; 0xcbe <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	9a 81       	ldd	r25, Y+2	; 0x02
     c80:	80 70       	andi	r24, 0x00	; 0
     c82:	97 70       	andi	r25, 0x07	; 7
     c84:	88 0f       	add	r24, r24
     c86:	89 2f       	mov	r24, r25
     c88:	88 1f       	adc	r24, r24
     c8a:	99 0b       	sbc	r25, r25
     c8c:	91 95       	neg	r25
     c8e:	81 6a       	ori	r24, 0xA1	; 161
     c90:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     c94:	0e 94 31 13 	call	0x2662	; 0x2662 <TWI_getStatus>
     c98:	80 34       	cpi	r24, 0x40	; 64
     c9a:	11 f0       	breq	.+4      	; 0xca0 <EEPROM_readByte+0x90>
        return ERROR;
     c9c:	1d 82       	std	Y+5, r1	; 0x05
     c9e:	0f c0       	rjmp	.+30     	; 0xcbe <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     ca0:	0e 94 1e 13 	call	0x263c	; 0x263c <TWI_readByteWithNACK>
     ca4:	eb 81       	ldd	r30, Y+3	; 0x03
     ca6:	fc 81       	ldd	r31, Y+4	; 0x04
     ca8:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     caa:	0e 94 31 13 	call	0x2662	; 0x2662 <TWI_getStatus>
     cae:	88 35       	cpi	r24, 0x58	; 88
     cb0:	11 f0       	breq	.+4      	; 0xcb6 <EEPROM_readByte+0xa6>
        return ERROR;
     cb2:	1d 82       	std	Y+5, r1	; 0x05
     cb4:	04 c0       	rjmp	.+8      	; 0xcbe <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     cb6:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <TWI_stop>

    return SUCCESS;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	8d 83       	std	Y+5, r24	; 0x05
     cbe:	8d 81       	ldd	r24, Y+5	; 0x05
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <GPIO_setupPinDirection+0x6>
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <GPIO_setupPinDirection+0x8>
     cd8:	0f 92       	push	r0
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	6a 83       	std	Y+2, r22	; 0x02
     ce2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	88 30       	cpi	r24, 0x08	; 8
     ce8:	08 f0       	brcs	.+2      	; 0xcec <GPIO_setupPinDirection+0x1c>
     cea:	d5 c0       	rjmp	.+426    	; 0xe96 <GPIO_setupPinDirection+0x1c6>
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	84 30       	cpi	r24, 0x04	; 4
     cf0:	08 f0       	brcs	.+2      	; 0xcf4 <GPIO_setupPinDirection+0x24>
     cf2:	d1 c0       	rjmp	.+418    	; 0xe96 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	3d 83       	std	Y+5, r19	; 0x05
     cfc:	2c 83       	std	Y+4, r18	; 0x04
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	9d 81       	ldd	r25, Y+5	; 0x05
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	91 05       	cpc	r25, r1
     d06:	09 f4       	brne	.+2      	; 0xd0a <GPIO_setupPinDirection+0x3a>
     d08:	43 c0       	rjmp	.+134    	; 0xd90 <GPIO_setupPinDirection+0xc0>
     d0a:	2c 81       	ldd	r18, Y+4	; 0x04
     d0c:	3d 81       	ldd	r19, Y+5	; 0x05
     d0e:	22 30       	cpi	r18, 0x02	; 2
     d10:	31 05       	cpc	r19, r1
     d12:	2c f4       	brge	.+10     	; 0xd1e <GPIO_setupPinDirection+0x4e>
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	9d 81       	ldd	r25, Y+5	; 0x05
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	71 f0       	breq	.+28     	; 0xd38 <GPIO_setupPinDirection+0x68>
     d1c:	bc c0       	rjmp	.+376    	; 0xe96 <GPIO_setupPinDirection+0x1c6>
     d1e:	2c 81       	ldd	r18, Y+4	; 0x04
     d20:	3d 81       	ldd	r19, Y+5	; 0x05
     d22:	22 30       	cpi	r18, 0x02	; 2
     d24:	31 05       	cpc	r19, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <GPIO_setupPinDirection+0x5a>
     d28:	5f c0       	rjmp	.+190    	; 0xde8 <GPIO_setupPinDirection+0x118>
     d2a:	8c 81       	ldd	r24, Y+4	; 0x04
     d2c:	9d 81       	ldd	r25, Y+5	; 0x05
     d2e:	83 30       	cpi	r24, 0x03	; 3
     d30:	91 05       	cpc	r25, r1
     d32:	09 f4       	brne	.+2      	; 0xd36 <GPIO_setupPinDirection+0x66>
     d34:	85 c0       	rjmp	.+266    	; 0xe40 <GPIO_setupPinDirection+0x170>
     d36:	af c0       	rjmp	.+350    	; 0xe96 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	a1 f4       	brne	.+40     	; 0xd66 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d3e:	aa e3       	ldi	r26, 0x3A	; 58
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	ea e3       	ldi	r30, 0x3A	; 58
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	48 2f       	mov	r20, r24
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 2e       	mov	r0, r18
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <GPIO_setupPinDirection+0x8c>
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	0a 94       	dec	r0
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <GPIO_setupPinDirection+0x88>
     d60:	84 2b       	or	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	98 c0       	rjmp	.+304    	; 0xe96 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d66:	aa e3       	ldi	r26, 0x3A	; 58
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	ea e3       	ldi	r30, 0x3A	; 58
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <GPIO_setupPinDirection+0xb4>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <GPIO_setupPinDirection+0xb0>
     d88:	80 95       	com	r24
     d8a:	84 23       	and	r24, r20
     d8c:	8c 93       	st	X, r24
     d8e:	83 c0       	rjmp	.+262    	; 0xe96 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	a1 f4       	brne	.+40     	; 0xdbe <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d96:	a7 e3       	ldi	r26, 0x37	; 55
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e7 e3       	ldi	r30, 0x37	; 55
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <GPIO_setupPinDirection+0xe4>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <GPIO_setupPinDirection+0xe0>
     db8:	84 2b       	or	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	6c c0       	rjmp	.+216    	; 0xe96 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     dbe:	a7 e3       	ldi	r26, 0x37	; 55
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e7 e3       	ldi	r30, 0x37	; 55
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <GPIO_setupPinDirection+0x10c>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <GPIO_setupPinDirection+0x108>
     de0:	80 95       	com	r24
     de2:	84 23       	and	r24, r20
     de4:	8c 93       	st	X, r24
     de6:	57 c0       	rjmp	.+174    	; 0xe96 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	a1 f4       	brne	.+40     	; 0xe16 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     dee:	a4 e3       	ldi	r26, 0x34	; 52
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e4 e3       	ldi	r30, 0x34	; 52
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <GPIO_setupPinDirection+0x13c>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <GPIO_setupPinDirection+0x138>
     e10:	84 2b       	or	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	40 c0       	rjmp	.+128    	; 0xe96 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     e16:	a4 e3       	ldi	r26, 0x34	; 52
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e4 e3       	ldi	r30, 0x34	; 52
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <GPIO_setupPinDirection+0x164>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <GPIO_setupPinDirection+0x160>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	2b c0       	rjmp	.+86     	; 0xe96 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	a1 f4       	brne	.+40     	; 0xe6e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e46:	a1 e3       	ldi	r26, 0x31	; 49
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e1 e3       	ldi	r30, 0x31	; 49
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <GPIO_setupPinDirection+0x194>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <GPIO_setupPinDirection+0x190>
     e68:	84 2b       	or	r24, r20
     e6a:	8c 93       	st	X, r24
     e6c:	14 c0       	rjmp	.+40     	; 0xe96 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e6e:	a1 e3       	ldi	r26, 0x31	; 49
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e1 e3       	ldi	r30, 0x31	; 49
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	48 2f       	mov	r20, r24
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 2e       	mov	r0, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <GPIO_setupPinDirection+0x1bc>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	0a 94       	dec	r0
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <GPIO_setupPinDirection+0x1b8>
     e90:	80 95       	com	r24
     e92:	84 23       	and	r24, r20
     e94:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	00 d0       	rcall	.+0      	; 0xeac <GPIO_writePin+0x6>
     eac:	00 d0       	rcall	.+0      	; 0xeae <GPIO_writePin+0x8>
     eae:	0f 92       	push	r0
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	6a 83       	std	Y+2, r22	; 0x02
     eb8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	88 30       	cpi	r24, 0x08	; 8
     ebe:	08 f0       	brcs	.+2      	; 0xec2 <GPIO_writePin+0x1c>
     ec0:	d5 c0       	rjmp	.+426    	; 0x106c <GPIO_writePin+0x1c6>
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	84 30       	cpi	r24, 0x04	; 4
     ec6:	08 f0       	brcs	.+2      	; 0xeca <GPIO_writePin+0x24>
     ec8:	d1 c0       	rjmp	.+418    	; 0x106c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	3d 83       	std	Y+5, r19	; 0x05
     ed2:	2c 83       	std	Y+4, r18	; 0x04
     ed4:	8c 81       	ldd	r24, Y+4	; 0x04
     ed6:	9d 81       	ldd	r25, Y+5	; 0x05
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	91 05       	cpc	r25, r1
     edc:	09 f4       	brne	.+2      	; 0xee0 <GPIO_writePin+0x3a>
     ede:	43 c0       	rjmp	.+134    	; 0xf66 <GPIO_writePin+0xc0>
     ee0:	2c 81       	ldd	r18, Y+4	; 0x04
     ee2:	3d 81       	ldd	r19, Y+5	; 0x05
     ee4:	22 30       	cpi	r18, 0x02	; 2
     ee6:	31 05       	cpc	r19, r1
     ee8:	2c f4       	brge	.+10     	; 0xef4 <GPIO_writePin+0x4e>
     eea:	8c 81       	ldd	r24, Y+4	; 0x04
     eec:	9d 81       	ldd	r25, Y+5	; 0x05
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	71 f0       	breq	.+28     	; 0xf0e <GPIO_writePin+0x68>
     ef2:	bc c0       	rjmp	.+376    	; 0x106c <GPIO_writePin+0x1c6>
     ef4:	2c 81       	ldd	r18, Y+4	; 0x04
     ef6:	3d 81       	ldd	r19, Y+5	; 0x05
     ef8:	22 30       	cpi	r18, 0x02	; 2
     efa:	31 05       	cpc	r19, r1
     efc:	09 f4       	brne	.+2      	; 0xf00 <GPIO_writePin+0x5a>
     efe:	5f c0       	rjmp	.+190    	; 0xfbe <GPIO_writePin+0x118>
     f00:	8c 81       	ldd	r24, Y+4	; 0x04
     f02:	9d 81       	ldd	r25, Y+5	; 0x05
     f04:	83 30       	cpi	r24, 0x03	; 3
     f06:	91 05       	cpc	r25, r1
     f08:	09 f4       	brne	.+2      	; 0xf0c <GPIO_writePin+0x66>
     f0a:	85 c0       	rjmp	.+266    	; 0x1016 <GPIO_writePin+0x170>
     f0c:	af c0       	rjmp	.+350    	; 0x106c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	a1 f4       	brne	.+40     	; 0xf3c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     f14:	ab e3       	ldi	r26, 0x3B	; 59
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	eb e3       	ldi	r30, 0x3B	; 59
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <GPIO_writePin+0x8c>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <GPIO_writePin+0x88>
     f36:	84 2b       	or	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	98 c0       	rjmp	.+304    	; 0x106c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f3c:	ab e3       	ldi	r26, 0x3B	; 59
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	eb e3       	ldi	r30, 0x3B	; 59
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <GPIO_writePin+0xb4>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <GPIO_writePin+0xb0>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	83 c0       	rjmp	.+262    	; 0x106c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	a1 f4       	brne	.+40     	; 0xf94 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     f6c:	a8 e3       	ldi	r26, 0x38	; 56
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e8 e3       	ldi	r30, 0x38	; 56
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <GPIO_writePin+0xe4>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <GPIO_writePin+0xe0>
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	6c c0       	rjmp	.+216    	; 0x106c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     f94:	a8 e3       	ldi	r26, 0x38	; 56
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e8 e3       	ldi	r30, 0x38	; 56
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <GPIO_writePin+0x10c>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <GPIO_writePin+0x108>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	57 c0       	rjmp	.+174    	; 0x106c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	a1 f4       	brne	.+40     	; 0xfec <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     fc4:	a5 e3       	ldi	r26, 0x35	; 53
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e5 e3       	ldi	r30, 0x35	; 53
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <GPIO_writePin+0x13c>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <GPIO_writePin+0x138>
     fe6:	84 2b       	or	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	40 c0       	rjmp	.+128    	; 0x106c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     fec:	a5 e3       	ldi	r26, 0x35	; 53
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e5 e3       	ldi	r30, 0x35	; 53
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <GPIO_writePin+0x164>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <GPIO_writePin+0x160>
    100e:	80 95       	com	r24
    1010:	84 23       	and	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	2b c0       	rjmp	.+86     	; 0x106c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	a1 f4       	brne	.+40     	; 0x1044 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    101c:	a2 e3       	ldi	r26, 0x32	; 50
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e2 e3       	ldi	r30, 0x32	; 50
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	48 2f       	mov	r20, r24
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	02 2e       	mov	r0, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <GPIO_writePin+0x194>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <GPIO_writePin+0x190>
    103e:	84 2b       	or	r24, r20
    1040:	8c 93       	st	X, r24
    1042:	14 c0       	rjmp	.+40     	; 0x106c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1044:	a2 e3       	ldi	r26, 0x32	; 50
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e2 e3       	ldi	r30, 0x32	; 50
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <GPIO_writePin+0x1bc>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <GPIO_writePin+0x1b8>
    1066:	80 95       	com	r24
    1068:	84 23       	and	r24, r20
    106a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <GPIO_readPin+0x6>
    1082:	00 d0       	rcall	.+0      	; 0x1084 <GPIO_readPin+0x8>
    1084:	0f 92       	push	r0
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	8a 83       	std	Y+2, r24	; 0x02
    108c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    108e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	88 30       	cpi	r24, 0x08	; 8
    1094:	08 f0       	brcs	.+2      	; 0x1098 <GPIO_readPin+0x1c>
    1096:	84 c0       	rjmp	.+264    	; 0x11a0 <GPIO_readPin+0x124>
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	84 30       	cpi	r24, 0x04	; 4
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <GPIO_readPin+0x24>
    109e:	80 c0       	rjmp	.+256    	; 0x11a0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	3d 83       	std	Y+5, r19	; 0x05
    10a8:	2c 83       	std	Y+4, r18	; 0x04
    10aa:	4c 81       	ldd	r20, Y+4	; 0x04
    10ac:	5d 81       	ldd	r21, Y+5	; 0x05
    10ae:	41 30       	cpi	r20, 0x01	; 1
    10b0:	51 05       	cpc	r21, r1
    10b2:	79 f1       	breq	.+94     	; 0x1112 <GPIO_readPin+0x96>
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	9d 81       	ldd	r25, Y+5	; 0x05
    10b8:	82 30       	cpi	r24, 0x02	; 2
    10ba:	91 05       	cpc	r25, r1
    10bc:	34 f4       	brge	.+12     	; 0x10ca <GPIO_readPin+0x4e>
    10be:	2c 81       	ldd	r18, Y+4	; 0x04
    10c0:	3d 81       	ldd	r19, Y+5	; 0x05
    10c2:	21 15       	cp	r18, r1
    10c4:	31 05       	cpc	r19, r1
    10c6:	69 f0       	breq	.+26     	; 0x10e2 <GPIO_readPin+0x66>
    10c8:	6b c0       	rjmp	.+214    	; 0x11a0 <GPIO_readPin+0x124>
    10ca:	4c 81       	ldd	r20, Y+4	; 0x04
    10cc:	5d 81       	ldd	r21, Y+5	; 0x05
    10ce:	42 30       	cpi	r20, 0x02	; 2
    10d0:	51 05       	cpc	r21, r1
    10d2:	b9 f1       	breq	.+110    	; 0x1142 <GPIO_readPin+0xc6>
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	9d 81       	ldd	r25, Y+5	; 0x05
    10d8:	83 30       	cpi	r24, 0x03	; 3
    10da:	91 05       	cpc	r25, r1
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <GPIO_readPin+0x64>
    10de:	49 c0       	rjmp	.+146    	; 0x1172 <GPIO_readPin+0xf6>
    10e0:	5f c0       	rjmp	.+190    	; 0x11a0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    10e2:	e9 e3       	ldi	r30, 0x39	; 57
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	a9 01       	movw	r20, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <GPIO_readPin+0x7e>
    10f6:	55 95       	asr	r21
    10f8:	47 95       	ror	r20
    10fa:	8a 95       	dec	r24
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <GPIO_readPin+0x7a>
    10fe:	ca 01       	movw	r24, r20
    1100:	81 70       	andi	r24, 0x01	; 1
    1102:	90 70       	andi	r25, 0x00	; 0
    1104:	88 23       	and	r24, r24
    1106:	19 f0       	breq	.+6      	; 0x110e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	49 c0       	rjmp	.+146    	; 0x11a0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    110e:	19 82       	std	Y+1, r1	; 0x01
    1110:	47 c0       	rjmp	.+142    	; 0x11a0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1112:	e6 e3       	ldi	r30, 0x36	; 54
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	a9 01       	movw	r20, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_readPin+0xae>
    1126:	55 95       	asr	r21
    1128:	47 95       	ror	r20
    112a:	8a 95       	dec	r24
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_readPin+0xaa>
    112e:	ca 01       	movw	r24, r20
    1130:	81 70       	andi	r24, 0x01	; 1
    1132:	90 70       	andi	r25, 0x00	; 0
    1134:	88 23       	and	r24, r24
    1136:	19 f0       	breq	.+6      	; 0x113e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	89 83       	std	Y+1, r24	; 0x01
    113c:	31 c0       	rjmp	.+98     	; 0x11a0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    113e:	19 82       	std	Y+1, r1	; 0x01
    1140:	2f c0       	rjmp	.+94     	; 0x11a0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1142:	e3 e3       	ldi	r30, 0x33	; 51
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	a9 01       	movw	r20, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <GPIO_readPin+0xde>
    1156:	55 95       	asr	r21
    1158:	47 95       	ror	r20
    115a:	8a 95       	dec	r24
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <GPIO_readPin+0xda>
    115e:	ca 01       	movw	r24, r20
    1160:	81 70       	andi	r24, 0x01	; 1
    1162:	90 70       	andi	r25, 0x00	; 0
    1164:	88 23       	and	r24, r24
    1166:	19 f0       	breq	.+6      	; 0x116e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	19 c0       	rjmp	.+50     	; 0x11a0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    116e:	19 82       	std	Y+1, r1	; 0x01
    1170:	17 c0       	rjmp	.+46     	; 0x11a0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1172:	e0 e3       	ldi	r30, 0x30	; 48
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	a9 01       	movw	r20, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <GPIO_readPin+0x10e>
    1186:	55 95       	asr	r21
    1188:	47 95       	ror	r20
    118a:	8a 95       	dec	r24
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <GPIO_readPin+0x10a>
    118e:	ca 01       	movw	r24, r20
    1190:	81 70       	andi	r24, 0x01	; 1
    1192:	90 70       	andi	r25, 0x00	; 0
    1194:	88 23       	and	r24, r24
    1196:	19 f0       	breq	.+6      	; 0x119e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    119e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <GPIO_setupPortDirection+0x6>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <GPIO_setupPortDirection+0x8>
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	84 30       	cpi	r24, 0x04	; 4
    11c6:	90 f5       	brcc	.+100    	; 0x122c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	3c 83       	std	Y+4, r19	; 0x04
    11d0:	2b 83       	std	Y+3, r18	; 0x03
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	91 05       	cpc	r25, r1
    11da:	d1 f0       	breq	.+52     	; 0x1210 <GPIO_setupPortDirection+0x5e>
    11dc:	2b 81       	ldd	r18, Y+3	; 0x03
    11de:	3c 81       	ldd	r19, Y+4	; 0x04
    11e0:	22 30       	cpi	r18, 0x02	; 2
    11e2:	31 05       	cpc	r19, r1
    11e4:	2c f4       	brge	.+10     	; 0x11f0 <GPIO_setupPortDirection+0x3e>
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	61 f0       	breq	.+24     	; 0x1206 <GPIO_setupPortDirection+0x54>
    11ee:	1e c0       	rjmp	.+60     	; 0x122c <GPIO_setupPortDirection+0x7a>
    11f0:	2b 81       	ldd	r18, Y+3	; 0x03
    11f2:	3c 81       	ldd	r19, Y+4	; 0x04
    11f4:	22 30       	cpi	r18, 0x02	; 2
    11f6:	31 05       	cpc	r19, r1
    11f8:	81 f0       	breq	.+32     	; 0x121a <GPIO_setupPortDirection+0x68>
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	83 30       	cpi	r24, 0x03	; 3
    1200:	91 05       	cpc	r25, r1
    1202:	81 f0       	breq	.+32     	; 0x1224 <GPIO_setupPortDirection+0x72>
    1204:	13 c0       	rjmp	.+38     	; 0x122c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1206:	ea e3       	ldi	r30, 0x3A	; 58
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	80 83       	st	Z, r24
    120e:	0e c0       	rjmp	.+28     	; 0x122c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1210:	e7 e3       	ldi	r30, 0x37	; 55
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	80 83       	st	Z, r24
    1218:	09 c0       	rjmp	.+18     	; 0x122c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    121a:	e4 e3       	ldi	r30, 0x34	; 52
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	80 83       	st	Z, r24
    1222:	04 c0       	rjmp	.+8      	; 0x122c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1224:	e1 e3       	ldi	r30, 0x31	; 49
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	80 83       	st	Z, r24
			break;
		}
	}
}
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <GPIO_writePort+0x6>
    1240:	00 d0       	rcall	.+0      	; 0x1242 <GPIO_writePort+0x8>
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	84 30       	cpi	r24, 0x04	; 4
    124e:	90 f5       	brcc	.+100    	; 0x12b4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3c 83       	std	Y+4, r19	; 0x04
    1258:	2b 83       	std	Y+3, r18	; 0x03
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	9c 81       	ldd	r25, Y+4	; 0x04
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	91 05       	cpc	r25, r1
    1262:	d1 f0       	breq	.+52     	; 0x1298 <GPIO_writePort+0x5e>
    1264:	2b 81       	ldd	r18, Y+3	; 0x03
    1266:	3c 81       	ldd	r19, Y+4	; 0x04
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	2c f4       	brge	.+10     	; 0x1278 <GPIO_writePort+0x3e>
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	61 f0       	breq	.+24     	; 0x128e <GPIO_writePort+0x54>
    1276:	1e c0       	rjmp	.+60     	; 0x12b4 <GPIO_writePort+0x7a>
    1278:	2b 81       	ldd	r18, Y+3	; 0x03
    127a:	3c 81       	ldd	r19, Y+4	; 0x04
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	31 05       	cpc	r19, r1
    1280:	81 f0       	breq	.+32     	; 0x12a2 <GPIO_writePort+0x68>
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	91 05       	cpc	r25, r1
    128a:	81 f0       	breq	.+32     	; 0x12ac <GPIO_writePort+0x72>
    128c:	13 c0       	rjmp	.+38     	; 0x12b4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    128e:	eb e3       	ldi	r30, 0x3B	; 59
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	80 83       	st	Z, r24
    1296:	0e c0       	rjmp	.+28     	; 0x12b4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1298:	e8 e3       	ldi	r30, 0x38	; 56
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	80 83       	st	Z, r24
    12a0:	09 c0       	rjmp	.+18     	; 0x12b4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    12a2:	e5 e3       	ldi	r30, 0x35	; 53
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	80 83       	st	Z, r24
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    12ac:	e2 e3       	ldi	r30, 0x32	; 50
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	80 83       	st	Z, r24
			break;
		}
	}
}
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <GPIO_readPort+0x6>
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <GPIO_readPort+0x8>
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    12d0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	84 30       	cpi	r24, 0x04	; 4
    12d6:	90 f5       	brcc	.+100    	; 0x133c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	3c 83       	std	Y+4, r19	; 0x04
    12e0:	2b 83       	std	Y+3, r18	; 0x03
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	9c 81       	ldd	r25, Y+4	; 0x04
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	91 05       	cpc	r25, r1
    12ea:	d1 f0       	breq	.+52     	; 0x1320 <GPIO_readPort+0x5e>
    12ec:	2b 81       	ldd	r18, Y+3	; 0x03
    12ee:	3c 81       	ldd	r19, Y+4	; 0x04
    12f0:	22 30       	cpi	r18, 0x02	; 2
    12f2:	31 05       	cpc	r19, r1
    12f4:	2c f4       	brge	.+10     	; 0x1300 <GPIO_readPort+0x3e>
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	61 f0       	breq	.+24     	; 0x1316 <GPIO_readPort+0x54>
    12fe:	1e c0       	rjmp	.+60     	; 0x133c <GPIO_readPort+0x7a>
    1300:	2b 81       	ldd	r18, Y+3	; 0x03
    1302:	3c 81       	ldd	r19, Y+4	; 0x04
    1304:	22 30       	cpi	r18, 0x02	; 2
    1306:	31 05       	cpc	r19, r1
    1308:	81 f0       	breq	.+32     	; 0x132a <GPIO_readPort+0x68>
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	83 30       	cpi	r24, 0x03	; 3
    1310:	91 05       	cpc	r25, r1
    1312:	81 f0       	breq	.+32     	; 0x1334 <GPIO_readPort+0x72>
    1314:	13 c0       	rjmp	.+38     	; 0x133c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1316:	e9 e3       	ldi	r30, 0x39	; 57
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	0e c0       	rjmp	.+28     	; 0x133c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1320:	e6 e3       	ldi	r30, 0x36	; 54
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	09 c0       	rjmp	.+18     	; 0x133c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    132a:	e3 e3       	ldi	r30, 0x33	; 51
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	04 c0       	rjmp	.+8      	; 0x133c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1334:	e0 e3       	ldi	r30, 0x30	; 48
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    133c:	89 81       	ldd	r24, Y+1	; 0x01
}
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	41 e0       	ldi	r20, 0x01	; 1
    135a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	61 e0       	ldi	r22, 0x01	; 1
    1362:	41 e0       	ldi	r20, 0x01	; 1
    1364:	0e 94 68 06 	call	0xcd0	; 0xcd0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	62 e0       	ldi	r22, 0x02	; 2
    136c:	41 e0       	ldi	r20, 0x01	; 1
    136e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	6f ef       	ldi	r22, 0xFF	; 255
    1376:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    137a:	88 e3       	ldi	r24, 0x38	; 56
    137c:	0e 94 c9 09 	call	0x1392	; 0x1392 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1380:	8c e0       	ldi	r24, 0x0C	; 12
    1382:	0e 94 c9 09 	call	0x1392	; 0x1392 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	0e 94 c9 09 	call	0x1392	; 0x1392 <LCD_sendCommand>
}
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	e9 97       	sbiw	r28, 0x39	; 57
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	61 e0       	ldi	r22, 0x01	; 1
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a0 e8       	ldi	r26, 0x80	; 128
    13c2:	bf e3       	ldi	r27, 0x3F	; 63
    13c4:	8d ab       	std	Y+53, r24	; 0x35
    13c6:	9e ab       	std	Y+54, r25	; 0x36
    13c8:	af ab       	std	Y+55, r26	; 0x37
    13ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13cc:	6d a9       	ldd	r22, Y+53	; 0x35
    13ce:	7e a9       	ldd	r23, Y+54	; 0x36
    13d0:	8f a9       	ldd	r24, Y+55	; 0x37
    13d2:	98 ad       	ldd	r25, Y+56	; 0x38
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	4a ef       	ldi	r20, 0xFA	; 250
    13da:	54 e4       	ldi	r21, 0x44	; 68
    13dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	89 ab       	std	Y+49, r24	; 0x31
    13e6:	9a ab       	std	Y+50, r25	; 0x32
    13e8:	ab ab       	std	Y+51, r26	; 0x33
    13ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13ec:	69 a9       	ldd	r22, Y+49	; 0x31
    13ee:	7a a9       	ldd	r23, Y+50	; 0x32
    13f0:	8b a9       	ldd	r24, Y+51	; 0x33
    13f2:	9c a9       	ldd	r25, Y+52	; 0x34
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e8       	ldi	r20, 0x80	; 128
    13fa:	5f e3       	ldi	r21, 0x3F	; 63
    13fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1400:	88 23       	and	r24, r24
    1402:	2c f4       	brge	.+10     	; 0x140e <LCD_sendCommand+0x7c>
		__ticks = 1;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	98 ab       	std	Y+48, r25	; 0x30
    140a:	8f a7       	std	Y+47, r24	; 0x2f
    140c:	3f c0       	rjmp	.+126    	; 0x148c <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    140e:	69 a9       	ldd	r22, Y+49	; 0x31
    1410:	7a a9       	ldd	r23, Y+50	; 0x32
    1412:	8b a9       	ldd	r24, Y+51	; 0x33
    1414:	9c a9       	ldd	r25, Y+52	; 0x34
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	3f ef       	ldi	r19, 0xFF	; 255
    141a:	4f e7       	ldi	r20, 0x7F	; 127
    141c:	57 e4       	ldi	r21, 0x47	; 71
    141e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1422:	18 16       	cp	r1, r24
    1424:	4c f5       	brge	.+82     	; 0x1478 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1426:	6d a9       	ldd	r22, Y+53	; 0x35
    1428:	7e a9       	ldd	r23, Y+54	; 0x36
    142a:	8f a9       	ldd	r24, Y+55	; 0x37
    142c:	98 ad       	ldd	r25, Y+56	; 0x38
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e2       	ldi	r20, 0x20	; 32
    1434:	51 e4       	ldi	r21, 0x41	; 65
    1436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	bc 01       	movw	r22, r24
    1440:	cd 01       	movw	r24, r26
    1442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	98 ab       	std	Y+48, r25	; 0x30
    144c:	8f a7       	std	Y+47, r24	; 0x2f
    144e:	0f c0       	rjmp	.+30     	; 0x146e <LCD_sendCommand+0xdc>
    1450:	88 ec       	ldi	r24, 0xC8	; 200
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	9e a7       	std	Y+46, r25	; 0x2e
    1456:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1458:	8d a5       	ldd	r24, Y+45	; 0x2d
    145a:	9e a5       	ldd	r25, Y+46	; 0x2e
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <LCD_sendCommand+0xca>
    1460:	9e a7       	std	Y+46, r25	; 0x2e
    1462:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1464:	8f a5       	ldd	r24, Y+47	; 0x2f
    1466:	98 a9       	ldd	r25, Y+48	; 0x30
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	98 ab       	std	Y+48, r25	; 0x30
    146c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1470:	98 a9       	ldd	r25, Y+48	; 0x30
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	69 f7       	brne	.-38     	; 0x1450 <LCD_sendCommand+0xbe>
    1476:	14 c0       	rjmp	.+40     	; 0x14a0 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1478:	69 a9       	ldd	r22, Y+49	; 0x31
    147a:	7a a9       	ldd	r23, Y+50	; 0x32
    147c:	8b a9       	ldd	r24, Y+51	; 0x33
    147e:	9c a9       	ldd	r25, Y+52	; 0x34
    1480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	98 ab       	std	Y+48, r25	; 0x30
    148a:	8f a7       	std	Y+47, r24	; 0x2f
    148c:	8f a5       	ldd	r24, Y+47	; 0x2f
    148e:	98 a9       	ldd	r25, Y+48	; 0x30
    1490:	9c a7       	std	Y+44, r25	; 0x2c
    1492:	8b a7       	std	Y+43, r24	; 0x2b
    1494:	8b a5       	ldd	r24, Y+43	; 0x2b
    1496:	9c a5       	ldd	r25, Y+44	; 0x2c
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <LCD_sendCommand+0x106>
    149c:	9c a7       	std	Y+44, r25	; 0x2c
    149e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	62 e0       	ldi	r22, 0x02	; 2
    14a4:	41 e0       	ldi	r20, 0x01	; 1
    14a6:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a0 e8       	ldi	r26, 0x80	; 128
    14b0:	bf e3       	ldi	r27, 0x3F	; 63
    14b2:	8f a3       	std	Y+39, r24	; 0x27
    14b4:	98 a7       	std	Y+40, r25	; 0x28
    14b6:	a9 a7       	std	Y+41, r26	; 0x29
    14b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ba:	6f a1       	ldd	r22, Y+39	; 0x27
    14bc:	78 a5       	ldd	r23, Y+40	; 0x28
    14be:	89 a5       	ldd	r24, Y+41	; 0x29
    14c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	4a ef       	ldi	r20, 0xFA	; 250
    14c8:	54 e4       	ldi	r21, 0x44	; 68
    14ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	8b a3       	std	Y+35, r24	; 0x23
    14d4:	9c a3       	std	Y+36, r25	; 0x24
    14d6:	ad a3       	std	Y+37, r26	; 0x25
    14d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14da:	6b a1       	ldd	r22, Y+35	; 0x23
    14dc:	7c a1       	ldd	r23, Y+36	; 0x24
    14de:	8d a1       	ldd	r24, Y+37	; 0x25
    14e0:	9e a1       	ldd	r25, Y+38	; 0x26
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e8       	ldi	r20, 0x80	; 128
    14e8:	5f e3       	ldi	r21, 0x3F	; 63
    14ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ee:	88 23       	and	r24, r24
    14f0:	2c f4       	brge	.+10     	; 0x14fc <LCD_sendCommand+0x16a>
		__ticks = 1;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	9a a3       	std	Y+34, r25	; 0x22
    14f8:	89 a3       	std	Y+33, r24	; 0x21
    14fa:	3f c0       	rjmp	.+126    	; 0x157a <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    14fc:	6b a1       	ldd	r22, Y+35	; 0x23
    14fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1500:	8d a1       	ldd	r24, Y+37	; 0x25
    1502:	9e a1       	ldd	r25, Y+38	; 0x26
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	3f ef       	ldi	r19, 0xFF	; 255
    1508:	4f e7       	ldi	r20, 0x7F	; 127
    150a:	57 e4       	ldi	r21, 0x47	; 71
    150c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1510:	18 16       	cp	r1, r24
    1512:	4c f5       	brge	.+82     	; 0x1566 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1514:	6f a1       	ldd	r22, Y+39	; 0x27
    1516:	78 a5       	ldd	r23, Y+40	; 0x28
    1518:	89 a5       	ldd	r24, Y+41	; 0x29
    151a:	9a a5       	ldd	r25, Y+42	; 0x2a
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e2       	ldi	r20, 0x20	; 32
    1522:	51 e4       	ldi	r21, 0x41	; 65
    1524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	bc 01       	movw	r22, r24
    152e:	cd 01       	movw	r24, r26
    1530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	9a a3       	std	Y+34, r25	; 0x22
    153a:	89 a3       	std	Y+33, r24	; 0x21
    153c:	0f c0       	rjmp	.+30     	; 0x155c <LCD_sendCommand+0x1ca>
    153e:	88 ec       	ldi	r24, 0xC8	; 200
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	98 a3       	std	Y+32, r25	; 0x20
    1544:	8f 8f       	std	Y+31, r24	; 0x1f
    1546:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1548:	98 a1       	ldd	r25, Y+32	; 0x20
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <LCD_sendCommand+0x1b8>
    154e:	98 a3       	std	Y+32, r25	; 0x20
    1550:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1552:	89 a1       	ldd	r24, Y+33	; 0x21
    1554:	9a a1       	ldd	r25, Y+34	; 0x22
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	9a a3       	std	Y+34, r25	; 0x22
    155a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155c:	89 a1       	ldd	r24, Y+33	; 0x21
    155e:	9a a1       	ldd	r25, Y+34	; 0x22
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	69 f7       	brne	.-38     	; 0x153e <LCD_sendCommand+0x1ac>
    1564:	14 c0       	rjmp	.+40     	; 0x158e <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1566:	6b a1       	ldd	r22, Y+35	; 0x23
    1568:	7c a1       	ldd	r23, Y+36	; 0x24
    156a:	8d a1       	ldd	r24, Y+37	; 0x25
    156c:	9e a1       	ldd	r25, Y+38	; 0x26
    156e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	9a a3       	std	Y+34, r25	; 0x22
    1578:	89 a3       	std	Y+33, r24	; 0x21
    157a:	89 a1       	ldd	r24, Y+33	; 0x21
    157c:	9a a1       	ldd	r25, Y+34	; 0x22
    157e:	9e 8f       	std	Y+30, r25	; 0x1e
    1580:	8d 8f       	std	Y+29, r24	; 0x1d
    1582:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1584:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <LCD_sendCommand+0x1f4>
    158a:	9e 8f       	std	Y+30, r25	; 0x1e
    158c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	69 ad       	ldd	r22, Y+57	; 0x39
    1592:	0e 94 1d 09 	call	0x123a	; 0x123a <GPIO_writePort>
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	a0 e8       	ldi	r26, 0x80	; 128
    159c:	bf e3       	ldi	r27, 0x3F	; 63
    159e:	89 8f       	std	Y+25, r24	; 0x19
    15a0:	9a 8f       	std	Y+26, r25	; 0x1a
    15a2:	ab 8f       	std	Y+27, r26	; 0x1b
    15a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a6:	69 8d       	ldd	r22, Y+25	; 0x19
    15a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	4a ef       	ldi	r20, 0xFA	; 250
    15b4:	54 e4       	ldi	r21, 0x44	; 68
    15b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	8d 8b       	std	Y+21, r24	; 0x15
    15c0:	9e 8b       	std	Y+22, r25	; 0x16
    15c2:	af 8b       	std	Y+23, r26	; 0x17
    15c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15c6:	6d 89       	ldd	r22, Y+21	; 0x15
    15c8:	7e 89       	ldd	r23, Y+22	; 0x16
    15ca:	8f 89       	ldd	r24, Y+23	; 0x17
    15cc:	98 8d       	ldd	r25, Y+24	; 0x18
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e8       	ldi	r20, 0x80	; 128
    15d4:	5f e3       	ldi	r21, 0x3F	; 63
    15d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15da:	88 23       	and	r24, r24
    15dc:	2c f4       	brge	.+10     	; 0x15e8 <LCD_sendCommand+0x256>
		__ticks = 1;
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9c 8b       	std	Y+20, r25	; 0x14
    15e4:	8b 8b       	std	Y+19, r24	; 0x13
    15e6:	3f c0       	rjmp	.+126    	; 0x1666 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    15e8:	6d 89       	ldd	r22, Y+21	; 0x15
    15ea:	7e 89       	ldd	r23, Y+22	; 0x16
    15ec:	8f 89       	ldd	r24, Y+23	; 0x17
    15ee:	98 8d       	ldd	r25, Y+24	; 0x18
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	3f ef       	ldi	r19, 0xFF	; 255
    15f4:	4f e7       	ldi	r20, 0x7F	; 127
    15f6:	57 e4       	ldi	r21, 0x47	; 71
    15f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15fc:	18 16       	cp	r1, r24
    15fe:	4c f5       	brge	.+82     	; 0x1652 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1600:	69 8d       	ldd	r22, Y+25	; 0x19
    1602:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1604:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1606:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e2       	ldi	r20, 0x20	; 32
    160e:	51 e4       	ldi	r21, 0x41	; 65
    1610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	bc 01       	movw	r22, r24
    161a:	cd 01       	movw	r24, r26
    161c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	9c 8b       	std	Y+20, r25	; 0x14
    1626:	8b 8b       	std	Y+19, r24	; 0x13
    1628:	0f c0       	rjmp	.+30     	; 0x1648 <LCD_sendCommand+0x2b6>
    162a:	88 ec       	ldi	r24, 0xC8	; 200
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	9a 8b       	std	Y+18, r25	; 0x12
    1630:	89 8b       	std	Y+17, r24	; 0x11
    1632:	89 89       	ldd	r24, Y+17	; 0x11
    1634:	9a 89       	ldd	r25, Y+18	; 0x12
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <LCD_sendCommand+0x2a4>
    163a:	9a 8b       	std	Y+18, r25	; 0x12
    163c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163e:	8b 89       	ldd	r24, Y+19	; 0x13
    1640:	9c 89       	ldd	r25, Y+20	; 0x14
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	9c 8b       	std	Y+20, r25	; 0x14
    1646:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1648:	8b 89       	ldd	r24, Y+19	; 0x13
    164a:	9c 89       	ldd	r25, Y+20	; 0x14
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	69 f7       	brne	.-38     	; 0x162a <LCD_sendCommand+0x298>
    1650:	14 c0       	rjmp	.+40     	; 0x167a <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1652:	6d 89       	ldd	r22, Y+21	; 0x15
    1654:	7e 89       	ldd	r23, Y+22	; 0x16
    1656:	8f 89       	ldd	r24, Y+23	; 0x17
    1658:	98 8d       	ldd	r25, Y+24	; 0x18
    165a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	9c 8b       	std	Y+20, r25	; 0x14
    1664:	8b 8b       	std	Y+19, r24	; 0x13
    1666:	8b 89       	ldd	r24, Y+19	; 0x13
    1668:	9c 89       	ldd	r25, Y+20	; 0x14
    166a:	98 8b       	std	Y+16, r25	; 0x10
    166c:	8f 87       	std	Y+15, r24	; 0x0f
    166e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1670:	98 89       	ldd	r25, Y+16	; 0x10
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <LCD_sendCommand+0x2e0>
    1676:	98 8b       	std	Y+16, r25	; 0x10
    1678:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	62 e0       	ldi	r22, 0x02	; 2
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	a0 e8       	ldi	r26, 0x80	; 128
    168a:	bf e3       	ldi	r27, 0x3F	; 63
    168c:	8b 87       	std	Y+11, r24	; 0x0b
    168e:	9c 87       	std	Y+12, r25	; 0x0c
    1690:	ad 87       	std	Y+13, r26	; 0x0d
    1692:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1694:	6b 85       	ldd	r22, Y+11	; 0x0b
    1696:	7c 85       	ldd	r23, Y+12	; 0x0c
    1698:	8d 85       	ldd	r24, Y+13	; 0x0d
    169a:	9e 85       	ldd	r25, Y+14	; 0x0e
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	4a ef       	ldi	r20, 0xFA	; 250
    16a2:	54 e4       	ldi	r21, 0x44	; 68
    16a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	8f 83       	std	Y+7, r24	; 0x07
    16ae:	98 87       	std	Y+8, r25	; 0x08
    16b0:	a9 87       	std	Y+9, r26	; 0x09
    16b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b4:	6f 81       	ldd	r22, Y+7	; 0x07
    16b6:	78 85       	ldd	r23, Y+8	; 0x08
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e8       	ldi	r20, 0x80	; 128
    16c2:	5f e3       	ldi	r21, 0x3F	; 63
    16c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c8:	88 23       	and	r24, r24
    16ca:	2c f4       	brge	.+10     	; 0x16d6 <LCD_sendCommand+0x344>
		__ticks = 1;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9e 83       	std	Y+6, r25	; 0x06
    16d2:	8d 83       	std	Y+5, r24	; 0x05
    16d4:	3f c0       	rjmp	.+126    	; 0x1754 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    16d6:	6f 81       	ldd	r22, Y+7	; 0x07
    16d8:	78 85       	ldd	r23, Y+8	; 0x08
    16da:	89 85       	ldd	r24, Y+9	; 0x09
    16dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	3f ef       	ldi	r19, 0xFF	; 255
    16e2:	4f e7       	ldi	r20, 0x7F	; 127
    16e4:	57 e4       	ldi	r21, 0x47	; 71
    16e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ea:	18 16       	cp	r1, r24
    16ec:	4c f5       	brge	.+82     	; 0x1740 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	40 e2       	ldi	r20, 0x20	; 32
    16fc:	51 e4       	ldi	r21, 0x41	; 65
    16fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	9e 83       	std	Y+6, r25	; 0x06
    1714:	8d 83       	std	Y+5, r24	; 0x05
    1716:	0f c0       	rjmp	.+30     	; 0x1736 <LCD_sendCommand+0x3a4>
    1718:	88 ec       	ldi	r24, 0xC8	; 200
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	8b 83       	std	Y+3, r24	; 0x03
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	9c 81       	ldd	r25, Y+4	; 0x04
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <LCD_sendCommand+0x392>
    1728:	9c 83       	std	Y+4, r25	; 0x04
    172a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172c:	8d 81       	ldd	r24, Y+5	; 0x05
    172e:	9e 81       	ldd	r25, Y+6	; 0x06
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	9e 81       	ldd	r25, Y+6	; 0x06
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	69 f7       	brne	.-38     	; 0x1718 <LCD_sendCommand+0x386>
    173e:	14 c0       	rjmp	.+40     	; 0x1768 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1740:	6f 81       	ldd	r22, Y+7	; 0x07
    1742:	78 85       	ldd	r23, Y+8	; 0x08
    1744:	89 85       	ldd	r24, Y+9	; 0x09
    1746:	9a 85       	ldd	r25, Y+10	; 0x0a
    1748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	9e 83       	std	Y+6, r25	; 0x06
    1752:	8d 83       	std	Y+5, r24	; 0x05
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	9a 83       	std	Y+2, r25	; 0x02
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	9a 81       	ldd	r25, Y+2	; 0x02
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <LCD_sendCommand+0x3ce>
    1764:	9a 83       	std	Y+2, r25	; 0x02
    1766:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1768:	e9 96       	adiw	r28, 0x39	; 57
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	e9 97       	sbiw	r28, 0x39	; 57
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	41 e0       	ldi	r20, 0x01	; 1
    1796:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	61 e0       	ldi	r22, 0x01	; 1
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a0 e8       	ldi	r26, 0x80	; 128
    17aa:	bf e3       	ldi	r27, 0x3F	; 63
    17ac:	8d ab       	std	Y+53, r24	; 0x35
    17ae:	9e ab       	std	Y+54, r25	; 0x36
    17b0:	af ab       	std	Y+55, r26	; 0x37
    17b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b4:	6d a9       	ldd	r22, Y+53	; 0x35
    17b6:	7e a9       	ldd	r23, Y+54	; 0x36
    17b8:	8f a9       	ldd	r24, Y+55	; 0x37
    17ba:	98 ad       	ldd	r25, Y+56	; 0x38
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a ef       	ldi	r20, 0xFA	; 250
    17c2:	54 e4       	ldi	r21, 0x44	; 68
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	89 ab       	std	Y+49, r24	; 0x31
    17ce:	9a ab       	std	Y+50, r25	; 0x32
    17d0:	ab ab       	std	Y+51, r26	; 0x33
    17d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17d4:	69 a9       	ldd	r22, Y+49	; 0x31
    17d6:	7a a9       	ldd	r23, Y+50	; 0x32
    17d8:	8b a9       	ldd	r24, Y+51	; 0x33
    17da:	9c a9       	ldd	r25, Y+52	; 0x34
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e8       	ldi	r20, 0x80	; 128
    17e2:	5f e3       	ldi	r21, 0x3F	; 63
    17e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17e8:	88 23       	and	r24, r24
    17ea:	2c f4       	brge	.+10     	; 0x17f6 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	98 ab       	std	Y+48, r25	; 0x30
    17f2:	8f a7       	std	Y+47, r24	; 0x2f
    17f4:	3f c0       	rjmp	.+126    	; 0x1874 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    17f6:	69 a9       	ldd	r22, Y+49	; 0x31
    17f8:	7a a9       	ldd	r23, Y+50	; 0x32
    17fa:	8b a9       	ldd	r24, Y+51	; 0x33
    17fc:	9c a9       	ldd	r25, Y+52	; 0x34
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	3f ef       	ldi	r19, 0xFF	; 255
    1802:	4f e7       	ldi	r20, 0x7F	; 127
    1804:	57 e4       	ldi	r21, 0x47	; 71
    1806:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180a:	18 16       	cp	r1, r24
    180c:	4c f5       	brge	.+82     	; 0x1860 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180e:	6d a9       	ldd	r22, Y+53	; 0x35
    1810:	7e a9       	ldd	r23, Y+54	; 0x36
    1812:	8f a9       	ldd	r24, Y+55	; 0x37
    1814:	98 ad       	ldd	r25, Y+56	; 0x38
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e2       	ldi	r20, 0x20	; 32
    181c:	51 e4       	ldi	r21, 0x41	; 65
    181e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	98 ab       	std	Y+48, r25	; 0x30
    1834:	8f a7       	std	Y+47, r24	; 0x2f
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <LCD_displayCharacter+0xdc>
    1838:	88 ec       	ldi	r24, 0xC8	; 200
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9e a7       	std	Y+46, r25	; 0x2e
    183e:	8d a7       	std	Y+45, r24	; 0x2d
    1840:	8d a5       	ldd	r24, Y+45	; 0x2d
    1842:	9e a5       	ldd	r25, Y+46	; 0x2e
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <LCD_displayCharacter+0xca>
    1848:	9e a7       	std	Y+46, r25	; 0x2e
    184a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184c:	8f a5       	ldd	r24, Y+47	; 0x2f
    184e:	98 a9       	ldd	r25, Y+48	; 0x30
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	98 ab       	std	Y+48, r25	; 0x30
    1854:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	8f a5       	ldd	r24, Y+47	; 0x2f
    1858:	98 a9       	ldd	r25, Y+48	; 0x30
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	69 f7       	brne	.-38     	; 0x1838 <LCD_displayCharacter+0xbe>
    185e:	14 c0       	rjmp	.+40     	; 0x1888 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1860:	69 a9       	ldd	r22, Y+49	; 0x31
    1862:	7a a9       	ldd	r23, Y+50	; 0x32
    1864:	8b a9       	ldd	r24, Y+51	; 0x33
    1866:	9c a9       	ldd	r25, Y+52	; 0x34
    1868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	98 ab       	std	Y+48, r25	; 0x30
    1872:	8f a7       	std	Y+47, r24	; 0x2f
    1874:	8f a5       	ldd	r24, Y+47	; 0x2f
    1876:	98 a9       	ldd	r25, Y+48	; 0x30
    1878:	9c a7       	std	Y+44, r25	; 0x2c
    187a:	8b a7       	std	Y+43, r24	; 0x2b
    187c:	8b a5       	ldd	r24, Y+43	; 0x2b
    187e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <LCD_displayCharacter+0x106>
    1884:	9c a7       	std	Y+44, r25	; 0x2c
    1886:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	62 e0       	ldi	r22, 0x02	; 2
    188c:	41 e0       	ldi	r20, 0x01	; 1
    188e:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	a0 e8       	ldi	r26, 0x80	; 128
    1898:	bf e3       	ldi	r27, 0x3F	; 63
    189a:	8f a3       	std	Y+39, r24	; 0x27
    189c:	98 a7       	std	Y+40, r25	; 0x28
    189e:	a9 a7       	std	Y+41, r26	; 0x29
    18a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a2:	6f a1       	ldd	r22, Y+39	; 0x27
    18a4:	78 a5       	ldd	r23, Y+40	; 0x28
    18a6:	89 a5       	ldd	r24, Y+41	; 0x29
    18a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	4a ef       	ldi	r20, 0xFA	; 250
    18b0:	54 e4       	ldi	r21, 0x44	; 68
    18b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	8b a3       	std	Y+35, r24	; 0x23
    18bc:	9c a3       	std	Y+36, r25	; 0x24
    18be:	ad a3       	std	Y+37, r26	; 0x25
    18c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18c2:	6b a1       	ldd	r22, Y+35	; 0x23
    18c4:	7c a1       	ldd	r23, Y+36	; 0x24
    18c6:	8d a1       	ldd	r24, Y+37	; 0x25
    18c8:	9e a1       	ldd	r25, Y+38	; 0x26
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e8       	ldi	r20, 0x80	; 128
    18d0:	5f e3       	ldi	r21, 0x3F	; 63
    18d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d6:	88 23       	and	r24, r24
    18d8:	2c f4       	brge	.+10     	; 0x18e4 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	9a a3       	std	Y+34, r25	; 0x22
    18e0:	89 a3       	std	Y+33, r24	; 0x21
    18e2:	3f c0       	rjmp	.+126    	; 0x1962 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    18e4:	6b a1       	ldd	r22, Y+35	; 0x23
    18e6:	7c a1       	ldd	r23, Y+36	; 0x24
    18e8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ea:	9e a1       	ldd	r25, Y+38	; 0x26
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	3f ef       	ldi	r19, 0xFF	; 255
    18f0:	4f e7       	ldi	r20, 0x7F	; 127
    18f2:	57 e4       	ldi	r21, 0x47	; 71
    18f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18f8:	18 16       	cp	r1, r24
    18fa:	4c f5       	brge	.+82     	; 0x194e <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fc:	6f a1       	ldd	r22, Y+39	; 0x27
    18fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1900:	89 a5       	ldd	r24, Y+41	; 0x29
    1902:	9a a5       	ldd	r25, Y+42	; 0x2a
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e2       	ldi	r20, 0x20	; 32
    190a:	51 e4       	ldi	r21, 0x41	; 65
    190c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	bc 01       	movw	r22, r24
    1916:	cd 01       	movw	r24, r26
    1918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	9a a3       	std	Y+34, r25	; 0x22
    1922:	89 a3       	std	Y+33, r24	; 0x21
    1924:	0f c0       	rjmp	.+30     	; 0x1944 <LCD_displayCharacter+0x1ca>
    1926:	88 ec       	ldi	r24, 0xC8	; 200
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	98 a3       	std	Y+32, r25	; 0x20
    192c:	8f 8f       	std	Y+31, r24	; 0x1f
    192e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1930:	98 a1       	ldd	r25, Y+32	; 0x20
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <LCD_displayCharacter+0x1b8>
    1936:	98 a3       	std	Y+32, r25	; 0x20
    1938:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193a:	89 a1       	ldd	r24, Y+33	; 0x21
    193c:	9a a1       	ldd	r25, Y+34	; 0x22
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	9a a3       	std	Y+34, r25	; 0x22
    1942:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1944:	89 a1       	ldd	r24, Y+33	; 0x21
    1946:	9a a1       	ldd	r25, Y+34	; 0x22
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	69 f7       	brne	.-38     	; 0x1926 <LCD_displayCharacter+0x1ac>
    194c:	14 c0       	rjmp	.+40     	; 0x1976 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194e:	6b a1       	ldd	r22, Y+35	; 0x23
    1950:	7c a1       	ldd	r23, Y+36	; 0x24
    1952:	8d a1       	ldd	r24, Y+37	; 0x25
    1954:	9e a1       	ldd	r25, Y+38	; 0x26
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9a a3       	std	Y+34, r25	; 0x22
    1960:	89 a3       	std	Y+33, r24	; 0x21
    1962:	89 a1       	ldd	r24, Y+33	; 0x21
    1964:	9a a1       	ldd	r25, Y+34	; 0x22
    1966:	9e 8f       	std	Y+30, r25	; 0x1e
    1968:	8d 8f       	std	Y+29, r24	; 0x1d
    196a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    196c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <LCD_displayCharacter+0x1f4>
    1972:	9e 8f       	std	Y+30, r25	; 0x1e
    1974:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	69 ad       	ldd	r22, Y+57	; 0x39
    197a:	0e 94 1d 09 	call	0x123a	; 0x123a <GPIO_writePort>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a0 e8       	ldi	r26, 0x80	; 128
    1984:	bf e3       	ldi	r27, 0x3F	; 63
    1986:	89 8f       	std	Y+25, r24	; 0x19
    1988:	9a 8f       	std	Y+26, r25	; 0x1a
    198a:	ab 8f       	std	Y+27, r26	; 0x1b
    198c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198e:	69 8d       	ldd	r22, Y+25	; 0x19
    1990:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1992:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1994:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a ef       	ldi	r20, 0xFA	; 250
    199c:	54 e4       	ldi	r21, 0x44	; 68
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	8d 8b       	std	Y+21, r24	; 0x15
    19a8:	9e 8b       	std	Y+22, r25	; 0x16
    19aa:	af 8b       	std	Y+23, r26	; 0x17
    19ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19ae:	6d 89       	ldd	r22, Y+21	; 0x15
    19b0:	7e 89       	ldd	r23, Y+22	; 0x16
    19b2:	8f 89       	ldd	r24, Y+23	; 0x17
    19b4:	98 8d       	ldd	r25, Y+24	; 0x18
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <LCD_displayCharacter+0x256>
		__ticks = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9c 8b       	std	Y+20, r25	; 0x14
    19cc:	8b 8b       	std	Y+19, r24	; 0x13
    19ce:	3f c0       	rjmp	.+126    	; 0x1a4e <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    19d0:	6d 89       	ldd	r22, Y+21	; 0x15
    19d2:	7e 89       	ldd	r23, Y+22	; 0x16
    19d4:	8f 89       	ldd	r24, Y+23	; 0x17
    19d6:	98 8d       	ldd	r25, Y+24	; 0x18
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	57 e4       	ldi	r21, 0x47	; 71
    19e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	4c f5       	brge	.+82     	; 0x1a3a <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e8:	69 8d       	ldd	r22, Y+25	; 0x19
    19ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e2       	ldi	r20, 0x20	; 32
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9c 8b       	std	Y+20, r25	; 0x14
    1a0e:	8b 8b       	std	Y+19, r24	; 0x13
    1a10:	0f c0       	rjmp	.+30     	; 0x1a30 <LCD_displayCharacter+0x2b6>
    1a12:	88 ec       	ldi	r24, 0xC8	; 200
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	9a 8b       	std	Y+18, r25	; 0x12
    1a18:	89 8b       	std	Y+17, r24	; 0x11
    1a1a:	89 89       	ldd	r24, Y+17	; 0x11
    1a1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <LCD_displayCharacter+0x2a4>
    1a22:	9a 8b       	std	Y+18, r25	; 0x12
    1a24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a26:	8b 89       	ldd	r24, Y+19	; 0x13
    1a28:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	9c 8b       	std	Y+20, r25	; 0x14
    1a2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a30:	8b 89       	ldd	r24, Y+19	; 0x13
    1a32:	9c 89       	ldd	r25, Y+20	; 0x14
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	69 f7       	brne	.-38     	; 0x1a12 <LCD_displayCharacter+0x298>
    1a38:	14 c0       	rjmp	.+40     	; 0x1a62 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a40:	98 8d       	ldd	r25, Y+24	; 0x18
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9c 8b       	std	Y+20, r25	; 0x14
    1a4c:	8b 8b       	std	Y+19, r24	; 0x13
    1a4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a50:	9c 89       	ldd	r25, Y+20	; 0x14
    1a52:	98 8b       	std	Y+16, r25	; 0x10
    1a54:	8f 87       	std	Y+15, r24	; 0x0f
    1a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a58:	98 89       	ldd	r25, Y+16	; 0x10
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <LCD_displayCharacter+0x2e0>
    1a5e:	98 8b       	std	Y+16, r25	; 0x10
    1a60:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	62 e0       	ldi	r22, 0x02	; 2
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a0 e8       	ldi	r26, 0x80	; 128
    1a72:	bf e3       	ldi	r27, 0x3F	; 63
    1a74:	8b 87       	std	Y+11, r24	; 0x0b
    1a76:	9c 87       	std	Y+12, r25	; 0x0c
    1a78:	ad 87       	std	Y+13, r26	; 0x0d
    1a7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a ef       	ldi	r20, 0xFA	; 250
    1a8a:	54 e4       	ldi	r21, 0x44	; 68
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	8f 83       	std	Y+7, r24	; 0x07
    1a96:	98 87       	std	Y+8, r25	; 0x08
    1a98:	a9 87       	std	Y+9, r26	; 0x09
    1a9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9e:	78 85       	ldd	r23, Y+8	; 0x08
    1aa0:	89 85       	ldd	r24, Y+9	; 0x09
    1aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <LCD_displayCharacter+0x344>
		__ticks = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	3f c0       	rjmp	.+126    	; 0x1b3c <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	4c f5       	brge	.+82     	; 0x1b28 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    1adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <LCD_displayCharacter+0x3a4>
    1b00:	88 ec       	ldi	r24, 0xC8	; 200
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	9c 83       	std	Y+4, r25	; 0x04
    1b06:	8b 83       	std	Y+3, r24	; 0x03
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LCD_displayCharacter+0x392>
    1b10:	9c 83       	std	Y+4, r25	; 0x04
    1b12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <LCD_displayCharacter+0x386>
    1b26:	14 c0       	rjmp	.+40     	; 0x1b50 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b28:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2a:	78 85       	ldd	r23, Y+8	; 0x08
    1b2c:	89 85       	ldd	r24, Y+9	; 0x09
    1b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	9a 83       	std	Y+2, r25	; 0x02
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <LCD_displayCharacter+0x3ce>
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1b50:	e9 96       	adiw	r28, 0x39	; 57
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <LCD_displayString+0x6>
    1b68:	0f 92       	push	r0
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	9b 83       	std	Y+3, r25	; 0x03
    1b70:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1b72:	19 82       	std	Y+1, r1	; 0x01
    1b74:	0e c0       	rjmp	.+28     	; 0x1b92 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b80:	fc 01       	movw	r30, r24
    1b82:	e2 0f       	add	r30, r18
    1b84:	f3 1f       	adc	r31, r19
    1b86:	80 81       	ld	r24, Z
    1b88:	0e 94 bd 0b 	call	0x177a	; 0x177a <LCD_displayCharacter>
		i++;
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	8f 5f       	subi	r24, 0xFF	; 255
    1b90:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	e2 0f       	add	r30, r18
    1ba0:	f3 1f       	adc	r31, r19
    1ba2:	80 81       	ld	r24, Z
    1ba4:	88 23       	and	r24, r24
    1ba6:	39 f7       	brne	.-50     	; 0x1b76 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <LCD_moveCursor+0x6>
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <LCD_moveCursor+0x8>
    1bbc:	0f 92       	push	r0
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	8a 83       	std	Y+2, r24	; 0x02
    1bc4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	3d 83       	std	Y+5, r19	; 0x05
    1bce:	2c 83       	std	Y+4, r18	; 0x04
    1bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	c1 f0       	breq	.+48     	; 0x1c0a <LCD_moveCursor+0x56>
    1bda:	2c 81       	ldd	r18, Y+4	; 0x04
    1bdc:	3d 81       	ldd	r19, Y+5	; 0x05
    1bde:	22 30       	cpi	r18, 0x02	; 2
    1be0:	31 05       	cpc	r19, r1
    1be2:	2c f4       	brge	.+10     	; 0x1bee <LCD_moveCursor+0x3a>
    1be4:	8c 81       	ldd	r24, Y+4	; 0x04
    1be6:	9d 81       	ldd	r25, Y+5	; 0x05
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	61 f0       	breq	.+24     	; 0x1c04 <LCD_moveCursor+0x50>
    1bec:	19 c0       	rjmp	.+50     	; 0x1c20 <LCD_moveCursor+0x6c>
    1bee:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf2:	22 30       	cpi	r18, 0x02	; 2
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	69 f0       	breq	.+26     	; 0x1c12 <LCD_moveCursor+0x5e>
    1bf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfc:	83 30       	cpi	r24, 0x03	; 3
    1bfe:	91 05       	cpc	r25, r1
    1c00:	61 f0       	breq	.+24     	; 0x1c1a <LCD_moveCursor+0x66>
    1c02:	0e c0       	rjmp	.+28     	; 0x1c20 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	0b c0       	rjmp	.+22     	; 0x1c20 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	80 5c       	subi	r24, 0xC0	; 192
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	07 c0       	rjmp	.+14     	; 0x1c20 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	80 5f       	subi	r24, 0xF0	; 240
    1c16:	89 83       	std	Y+1, r24	; 0x01
    1c18:	03 c0       	rjmp	.+6      	; 0x1c20 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	80 5b       	subi	r24, 0xB0	; 176
    1c1e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	80 68       	ori	r24, 0x80	; 128
    1c24:	0e 94 c9 09 	call	0x1392	; 0x1392 <LCD_sendCommand>
}
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <LCD_displayStringRowColumn+0x6>
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <LCD_displayStringRowColumn+0x8>
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	6a 83       	std	Y+2, r22	; 0x02
    1c48:	5c 83       	std	Y+4, r21	; 0x04
    1c4a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	6a 81       	ldd	r22, Y+2	; 0x02
    1c50:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <LCD_displayString>
}
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	62 97       	sbiw	r28, 0x12	; 18
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	9a 8b       	std	Y+18, r25	; 0x12
    1c80:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1c82:	89 89       	ldd	r24, Y+17	; 0x11
    1c84:	9a 89       	ldd	r25, Y+18	; 0x12
    1c86:	9e 01       	movw	r18, r28
    1c88:	2f 5f       	subi	r18, 0xFF	; 255
    1c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8c:	b9 01       	movw	r22, r18
    1c8e:	4a e0       	ldi	r20, 0x0A	; 10
    1c90:	50 e0       	ldi	r21, 0x00	; 0
    1c92:	0e 94 bb 14 	call	0x2976	; 0x2976 <itoa>
   LCD_displayString(buff); /* Display the string */
    1c96:	ce 01       	movw	r24, r28
    1c98:	01 96       	adiw	r24, 0x01	; 1
    1c9a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <LCD_displayString>
}
    1c9e:	62 96       	adiw	r28, 0x12	; 18
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	0e 94 c9 09 	call	0x1392	; 0x1392 <LCD_sendCommand>
}
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <DcMotor_init>:
 motor pins through the GPIO driver.
 Stop DC-Motor at the beginning through the GPIO driver.

 * */
void DcMotor_init(void)
{
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTC_ID,PIN6_ID, PIN_OUTPUT);//set bit 6 in PORTB as output pin
    1ccc:	82 e0       	ldi	r24, 0x02	; 2
    1cce:	66 e0       	ldi	r22, 0x06	; 6
    1cd0:	41 e0       	ldi	r20, 0x01	; 1
    1cd2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PIN7_ID, PIN_OUTPUT);//set bit 7 in PORTB as output pin
    1cd6:	82 e0       	ldi	r24, 0x02	; 2
    1cd8:	67 e0       	ldi	r22, 0x07	; 7
    1cda:	41 e0       	ldi	r20, 0x01	; 1
    1cdc:	0e 94 68 06 	call	0xcd0	; 0xcd0 <GPIO_setupPinDirection>


	GPIO_writePin(PORTC_ID, PIN6_ID, LOGIC_LOW);//initialize the DC Motor OFF
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	66 e0       	ldi	r22, 0x06	; 6
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
	GPIO_writePin(PORTC_ID, PIN7_ID, LOGIC_LOW);//initialize the DC Motor OFF
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	67 e0       	ldi	r22, 0x07	; 7
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>

}
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <DcMotor_rotate>:
 Description:
 The function responsible for rotate the DC Motor CW/ or A-CW or
 stop the motor based on the state input state value.
 */
void DcMotor_rotate(DcMotor_State state)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	0f 92       	push	r0
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	89 83       	std	Y+1, r24	; 0x01

	if(state == STOP)//condition to determine the direction of rotation of the motor
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	88 23       	and	r24, r24
    1d0a:	59 f4       	brne	.+22     	; 0x1d22 <DcMotor_rotate+0x28>
	{
		GPIO_writePin(PORTC_ID, PIN6_ID, LOGIC_LOW);
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	66 e0       	ldi	r22, 0x06	; 6
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
		GPIO_writePin(PORTC_ID, PIN7_ID, LOGIC_LOW);
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	67 e0       	ldi	r22, 0x07	; 7
    1d1a:	40 e0       	ldi	r20, 0x00	; 0
    1d1c:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
    1d20:	1b c0       	rjmp	.+54     	; 0x1d58 <DcMotor_rotate+0x5e>
	}else if(state == CCW)
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	82 30       	cpi	r24, 0x02	; 2
    1d26:	59 f4       	brne	.+22     	; 0x1d3e <DcMotor_rotate+0x44>
	{
		GPIO_writePin(PORTC_ID, PIN6_ID, LOGIC_LOW);
    1d28:	82 e0       	ldi	r24, 0x02	; 2
    1d2a:	66 e0       	ldi	r22, 0x06	; 6
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
		GPIO_writePin(PORTC_ID, PIN7_ID, LOGIC_HIGH);
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	67 e0       	ldi	r22, 0x07	; 7
    1d36:	41 e0       	ldi	r20, 0x01	; 1
    1d38:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
    1d3c:	0d c0       	rjmp	.+26     	; 0x1d58 <DcMotor_rotate+0x5e>
	}else if(state == CW)
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	51 f4       	brne	.+20     	; 0x1d58 <DcMotor_rotate+0x5e>
	{
		GPIO_writePin(PORTC_ID, PIN6_ID, LOGIC_HIGH);
    1d44:	82 e0       	ldi	r24, 0x02	; 2
    1d46:	66 e0       	ldi	r22, 0x06	; 6
    1d48:	41 e0       	ldi	r20, 0x01	; 1
    1d4a:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
		GPIO_writePin(PORTC_ID, PIN7_ID, LOGIC_LOW);
    1d4e:	82 e0       	ldi	r24, 0x02	; 2
    1d50:	67 e0       	ldi	r22, 0x07	; 7
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_writePin>
	}

}
    1d58:	0f 90       	pop	r0
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	08 95       	ret

00001d60 <savePassword>:
/*
 * Description :
 * function used to save new password in EEPROM
 */

void savePassword(uint8 *recieved) {
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	61 97       	sbiw	r28, 0x11	; 17
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	99 8b       	std	Y+17, r25	; 0x11
    1d76:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i = 0; i < 5; i++) {
    1d78:	1f 86       	std	Y+15, r1	; 0x0f
    1d7a:	86 c0       	rjmp	.+268    	; 0x1e88 <savePassword+0x128>
		EEPROM_writeByte(0x0311 + i, recievedPassword[i]); //to save password in EEPROM
    1d7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d7e:	88 2f       	mov	r24, r24
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	8f 5e       	subi	r24, 0xEF	; 239
    1d84:	9c 4f       	sbci	r25, 0xFC	; 252
    1d86:	ac 01       	movw	r20, r24
    1d88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8a:	88 2f       	mov	r24, r24
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	fc 01       	movw	r30, r24
    1d90:	e1 58       	subi	r30, 0x81	; 129
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	20 81       	ld	r18, Z
    1d96:	ca 01       	movw	r24, r20
    1d98:	62 2f       	mov	r22, r18
    1d9a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <EEPROM_writeByte>
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	a0 e2       	ldi	r26, 0x20	; 32
    1da4:	b1 e4       	ldi	r27, 0x41	; 65
    1da6:	8b 87       	std	Y+11, r24	; 0x0b
    1da8:	9c 87       	std	Y+12, r25	; 0x0c
    1daa:	ad 87       	std	Y+13, r26	; 0x0d
    1dac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	4a ef       	ldi	r20, 0xFA	; 250
    1dbc:	54 e4       	ldi	r21, 0x44	; 68
    1dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	8f 83       	std	Y+7, r24	; 0x07
    1dc8:	98 87       	std	Y+8, r25	; 0x08
    1dca:	a9 87       	std	Y+9, r26	; 0x09
    1dcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dce:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd0:	78 85       	ldd	r23, Y+8	; 0x08
    1dd2:	89 85       	ldd	r24, Y+9	; 0x09
    1dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e8       	ldi	r20, 0x80	; 128
    1ddc:	5f e3       	ldi	r21, 0x3F	; 63
    1dde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de2:	88 23       	and	r24, r24
    1de4:	2c f4       	brge	.+10     	; 0x1df0 <savePassword+0x90>
		__ticks = 1;
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	9e 83       	std	Y+6, r25	; 0x06
    1dec:	8d 83       	std	Y+5, r24	; 0x05
    1dee:	3f c0       	rjmp	.+126    	; 0x1e6e <savePassword+0x10e>
	else if (__tmp > 65535)
    1df0:	6f 81       	ldd	r22, Y+7	; 0x07
    1df2:	78 85       	ldd	r23, Y+8	; 0x08
    1df4:	89 85       	ldd	r24, Y+9	; 0x09
    1df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	3f ef       	ldi	r19, 0xFF	; 255
    1dfc:	4f e7       	ldi	r20, 0x7F	; 127
    1dfe:	57 e4       	ldi	r21, 0x47	; 71
    1e00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e04:	18 16       	cp	r1, r24
    1e06:	4c f5       	brge	.+82     	; 0x1e5a <savePassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e2       	ldi	r20, 0x20	; 32
    1e16:	51 e4       	ldi	r21, 0x41	; 65
    1e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	bc 01       	movw	r22, r24
    1e22:	cd 01       	movw	r24, r26
    1e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
    1e30:	0f c0       	rjmp	.+30     	; 0x1e50 <savePassword+0xf0>
    1e32:	88 ec       	ldi	r24, 0xC8	; 200
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	9c 83       	std	Y+4, r25	; 0x04
    1e38:	8b 83       	std	Y+3, r24	; 0x03
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <savePassword+0xde>
    1e42:	9c 83       	std	Y+4, r25	; 0x04
    1e44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e46:	8d 81       	ldd	r24, Y+5	; 0x05
    1e48:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	9e 83       	std	Y+6, r25	; 0x06
    1e4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e50:	8d 81       	ldd	r24, Y+5	; 0x05
    1e52:	9e 81       	ldd	r25, Y+6	; 0x06
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	69 f7       	brne	.-38     	; 0x1e32 <savePassword+0xd2>
    1e58:	14 c0       	rjmp	.+40     	; 0x1e82 <savePassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5c:	78 85       	ldd	r23, Y+8	; 0x08
    1e5e:	89 85       	ldd	r24, Y+9	; 0x09
    1e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	9e 83       	std	Y+6, r25	; 0x06
    1e6c:	8d 83       	std	Y+5, r24	; 0x05
    1e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e70:	9e 81       	ldd	r25, Y+6	; 0x06
    1e72:	9a 83       	std	Y+2, r25	; 0x02
    1e74:	89 83       	std	Y+1, r24	; 0x01
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <savePassword+0x11a>
    1e7e:	9a 83       	std	Y+2, r25	; 0x02
    1e80:	89 83       	std	Y+1, r24	; 0x01
 * function used to save new password in EEPROM
 */

void savePassword(uint8 *recieved) {
	uint8 i;
	for (i = 0; i < 5; i++) {
    1e82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e84:	8f 5f       	subi	r24, 0xFF	; 255
    1e86:	8f 87       	std	Y+15, r24	; 0x0f
    1e88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e8a:	85 30       	cpi	r24, 0x05	; 5
    1e8c:	08 f4       	brcc	.+2      	; 0x1e90 <savePassword+0x130>
    1e8e:	76 cf       	rjmp	.-276    	; 0x1d7c <savePassword+0x1c>
		EEPROM_writeByte(0x0311 + i, recievedPassword[i]); //to save password in EEPROM
		_delay_ms(10);

	}

}
    1e90:	61 96       	adiw	r28, 0x11	; 17
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <Timer0_Tick>:
/*
 * Description :
 * function to increment number of ticks
 */

void Timer0_Tick(void) {
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
	Tick++;
    1eaa:	80 91 76 00 	lds	r24, 0x0076
    1eae:	90 91 77 00 	lds	r25, 0x0077
    1eb2:	01 96       	adiw	r24, 0x01	; 1
    1eb4:	90 93 77 00 	sts	0x0077, r25
    1eb8:	80 93 76 00 	sts	0x0076, r24
}
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <checkForPassword2>:
 * Description :
 * function to check if password given from MC is correct
 * if not correct increment number of wrong entries if number equal 3 fire buzzer
 */

void checkForPassword2(void) {
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	27 97       	sbiw	r28, 0x07	; 7
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
	uint8 password[5];//array take password saved in EEPROM
	uint8 count;//variable to count number of correct character

	uint8 fault = 0;//variable to count number of wrong entries
    1ed6:	19 82       	std	Y+1, r1	; 0x01
    1ed8:	46 c0       	rjmp	.+140    	; 0x1f66 <checkForPassword2+0xa4>
	while (fault != 3) {//loop won't terminate until wrong entries =3 or password matched
		UART_receiveString(recievedPassword);//UART receive password from MC1
    1eda:	8f e7       	ldi	r24, 0x7F	; 127
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 1f 14 	call	0x283e	; 0x283e <UART_receiveString>
		for (count = 0; count < 5; count++) {// loop to check that received password matched with one on EEPROM
    1ee2:	1a 82       	std	Y+2, r1	; 0x02
    1ee4:	2e c0       	rjmp	.+92     	; 0x1f42 <checkForPassword2+0x80>
			EEPROM_readByte(0x0311 + count, &password[count]);
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	88 2f       	mov	r24, r24
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	8f 5e       	subi	r24, 0xEF	; 239
    1eee:	9c 4f       	sbci	r25, 0xFC	; 252
    1ef0:	ac 01       	movw	r20, r24
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	88 2f       	mov	r24, r24
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9e 01       	movw	r18, r28
    1efa:	2d 5f       	subi	r18, 0xFD	; 253
    1efc:	3f 4f       	sbci	r19, 0xFF	; 255
    1efe:	28 0f       	add	r18, r24
    1f00:	39 1f       	adc	r19, r25
    1f02:	ca 01       	movw	r24, r20
    1f04:	b9 01       	movw	r22, r18
    1f06:	0e 94 08 06 	call	0xc10	; 0xc10 <EEPROM_readByte>
			if (recievedPassword[count] != password[count]) {//condition if password don't match
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	88 2f       	mov	r24, r24
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	fc 01       	movw	r30, r24
    1f12:	e1 58       	subi	r30, 0x81	; 129
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	40 81       	ld	r20, Z
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	ce 01       	movw	r24, r28
    1f20:	03 96       	adiw	r24, 0x03	; 3
    1f22:	fc 01       	movw	r30, r24
    1f24:	e2 0f       	add	r30, r18
    1f26:	f3 1f       	adc	r31, r19
    1f28:	80 81       	ld	r24, Z
    1f2a:	48 17       	cp	r20, r24
    1f2c:	39 f0       	breq	.+14     	; 0x1f3c <checkForPassword2+0x7a>
				fault++;//increase no of wrong entries
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	8f 5f       	subi	r24, 0xFF	; 255
    1f32:	89 83       	std	Y+1, r24	; 0x01
				UART_sendByte(NOT_READY);//tell MC1 that password is wrong
    1f34:	82 e0       	ldi	r24, 0x02	; 2
    1f36:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <UART_sendByte>
    1f3a:	06 c0       	rjmp	.+12     	; 0x1f48 <checkForPassword2+0x86>
	uint8 count;//variable to count number of correct character

	uint8 fault = 0;//variable to count number of wrong entries
	while (fault != 3) {//loop won't terminate until wrong entries =3 or password matched
		UART_receiveString(recievedPassword);//UART receive password from MC1
		for (count = 0; count < 5; count++) {// loop to check that received password matched with one on EEPROM
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	8f 5f       	subi	r24, 0xFF	; 255
    1f40:	8a 83       	std	Y+2, r24	; 0x02
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	85 30       	cpi	r24, 0x05	; 5
    1f46:	78 f2       	brcs	.-98     	; 0x1ee6 <checkForPassword2+0x24>
				fault++;//increase no of wrong entries
				UART_sendByte(NOT_READY);//tell MC1 that password is wrong
				break;
			}
		}
		if (count == 5 && fault != 3) {// condition occur if password matched
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	85 30       	cpi	r24, 0x05	; 5
    1f4c:	51 f4       	brne	.+20     	; 0x1f62 <checkForPassword2+0xa0>
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	83 30       	cpi	r24, 0x03	; 3
    1f52:	39 f0       	breq	.+14     	; 0x1f62 <checkForPassword2+0xa0>

			UART_sendByte(READY);//tell MC1 that password is True
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <UART_sendByte>
			match = 1;//case for true password
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	80 93 86 00 	sts	0x0086, r24
    1f60:	06 c0       	rjmp	.+12     	; 0x1f6e <checkForPassword2+0xac>
			break;
		} else {
			match = 0;//case password is wrong
    1f62:	10 92 86 00 	sts	0x0086, r1
void checkForPassword2(void) {
	uint8 password[5];//array take password saved in EEPROM
	uint8 count;//variable to count number of correct character

	uint8 fault = 0;//variable to count number of wrong entries
	while (fault != 3) {//loop won't terminate until wrong entries =3 or password matched
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	83 30       	cpi	r24, 0x03	; 3
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <checkForPassword2+0xac>
    1f6c:	b6 cf       	rjmp	.-148    	; 0x1eda <checkForPassword2+0x18>
		} else {
			match = 0;//case password is wrong
		}

	}
}
    1f6e:	27 96       	adiw	r28, 0x07	; 7
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <main>:

int main() {
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	eb 97       	sbiw	r28, 0x3b	; 59
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61

	UART_ConfigType UART_Config = { ONE_STOP_BIT, EIGHT_BIT, 9600, DISABLED };//configuration of UART
    1f94:	9e 01       	movw	r18, r28
    1f96:	24 5d       	subi	r18, 0xD4	; 212
    1f98:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9a:	38 af       	std	Y+56, r19	; 0x38
    1f9c:	2f ab       	std	Y+55, r18	; 0x37
    1f9e:	8e e6       	ldi	r24, 0x6E	; 110
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	9a af       	std	Y+58, r25	; 0x3a
    1fa4:	89 af       	std	Y+57, r24	; 0x39
    1fa6:	97 e0       	ldi	r25, 0x07	; 7
    1fa8:	9b af       	std	Y+59, r25	; 0x3b
    1faa:	e9 ad       	ldd	r30, Y+57	; 0x39
    1fac:	fa ad       	ldd	r31, Y+58	; 0x3a
    1fae:	00 80       	ld	r0, Z
    1fb0:	29 ad       	ldd	r18, Y+57	; 0x39
    1fb2:	3a ad       	ldd	r19, Y+58	; 0x3a
    1fb4:	2f 5f       	subi	r18, 0xFF	; 255
    1fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb8:	3a af       	std	Y+58, r19	; 0x3a
    1fba:	29 af       	std	Y+57, r18	; 0x39
    1fbc:	ef a9       	ldd	r30, Y+55	; 0x37
    1fbe:	f8 ad       	ldd	r31, Y+56	; 0x38
    1fc0:	00 82       	st	Z, r0
    1fc2:	2f a9       	ldd	r18, Y+55	; 0x37
    1fc4:	38 ad       	ldd	r19, Y+56	; 0x38
    1fc6:	2f 5f       	subi	r18, 0xFF	; 255
    1fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fca:	38 af       	std	Y+56, r19	; 0x38
    1fcc:	2f ab       	std	Y+55, r18	; 0x37
    1fce:	3b ad       	ldd	r19, Y+59	; 0x3b
    1fd0:	31 50       	subi	r19, 0x01	; 1
    1fd2:	3b af       	std	Y+59, r19	; 0x3b
    1fd4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fd6:	88 23       	and	r24, r24
    1fd8:	41 f7       	brne	.-48     	; 0x1faa <main+0x2a>
	TWI_ConfigType TWI_Config = { TWI_NO_PRESCALER, 0X01 };//configuration of I2C
    1fda:	1b aa       	std	Y+51, r1	; 0x33
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	8c ab       	std	Y+52, r24	; 0x34
	TWI_init(&TWI_Config);//initialize I2c
    1fe0:	ce 01       	movw	r24, r28
    1fe2:	c3 96       	adiw	r24, 0x33	; 51
    1fe4:	0e 94 b8 12 	call	0x2570	; 0x2570 <TWI_init>
	SREG |= (1 << 7);//enable global interrupt
    1fe8:	af e5       	ldi	r26, 0x5F	; 95
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	ef e5       	ldi	r30, 0x5F	; 95
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	80 68       	ori	r24, 0x80	; 128
    1ff4:	8c 93       	st	X, r24
	Timer0_setCallBack(Timer0_Tick); /*Set Timer0 Call back function */
    1ff6:	81 e5       	ldi	r24, 0x51	; 81
    1ff8:	9f e0       	ldi	r25, 0x0F	; 15
    1ffa:	0e 94 99 12 	call	0x2532	; 0x2532 <Timer0_setCallBack>
	DcMotor_init();//initialize Motor
    1ffe:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <DcMotor_init>
	BUZZER_init();//initialize Buzzer
    2002:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_init>
	UART_init(&UART_Config);//initialize UART
    2006:	ce 01       	movw	r24, r28
    2008:	8c 96       	adiw	r24, 0x2c	; 44
    200a:	0e 94 40 13 	call	0x2680	; 0x2680 <UART_init>
	UART_receiveString(recievedPassword); //take the initial password from user
    200e:	8f e7       	ldi	r24, 0x7F	; 127
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0e 94 1f 14 	call	0x283e	; 0x283e <UART_receiveString>
	savePassword(recievedPassword); //save the initial password from user in EEPROM
    2016:	8f e7       	ldi	r24, 0x7F	; 127
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <savePassword>
	while (1) {//main loop

		uint8 key = UART_recieveByte(); //receive whether if user want to open door or to change password
    201e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <UART_recieveByte>
    2022:	8b a7       	std	Y+43, r24	; 0x2b
		switch (key) {
    2024:	8b a5       	ldd	r24, Y+43	; 0x2b
    2026:	e8 2f       	mov	r30, r24
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	fe ab       	std	Y+54, r31	; 0x36
    202c:	ed ab       	std	Y+53, r30	; 0x35
    202e:	2d a9       	ldd	r18, Y+53	; 0x35
    2030:	3e a9       	ldd	r19, Y+54	; 0x36
    2032:	2b 32       	cpi	r18, 0x2B	; 43
    2034:	31 05       	cpc	r19, r1
    2036:	39 f0       	breq	.+14     	; 0x2046 <main+0xc6>
    2038:	8d a9       	ldd	r24, Y+53	; 0x35
    203a:	9e a9       	ldd	r25, Y+54	; 0x36
    203c:	8d 32       	cpi	r24, 0x2D	; 45
    203e:	91 05       	cpc	r25, r1
    2040:	09 f4       	brne	.+2      	; 0x2044 <main+0xc4>
    2042:	c4 c0       	rjmp	.+392    	; 0x21cc <main+0x24c>
    2044:	ec cf       	rjmp	.-40     	; 0x201e <main+0x9e>

		case '+': {//case of open door

			checkForPassword2();//compare the password with one taken from UART
    2046:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <checkForPassword2>
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a0 e2       	ldi	r26, 0x20	; 32
    2050:	b1 e4       	ldi	r27, 0x41	; 65
    2052:	8f a3       	std	Y+39, r24	; 0x27
    2054:	98 a7       	std	Y+40, r25	; 0x28
    2056:	a9 a7       	std	Y+41, r26	; 0x29
    2058:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205a:	6f a1       	ldd	r22, Y+39	; 0x27
    205c:	78 a5       	ldd	r23, Y+40	; 0x28
    205e:	89 a5       	ldd	r24, Y+41	; 0x29
    2060:	9a a5       	ldd	r25, Y+42	; 0x2a
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4a ef       	ldi	r20, 0xFA	; 250
    2068:	54 e4       	ldi	r21, 0x44	; 68
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	8b a3       	std	Y+35, r24	; 0x23
    2074:	9c a3       	std	Y+36, r25	; 0x24
    2076:	ad a3       	std	Y+37, r26	; 0x25
    2078:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    207a:	6b a1       	ldd	r22, Y+35	; 0x23
    207c:	7c a1       	ldd	r23, Y+36	; 0x24
    207e:	8d a1       	ldd	r24, Y+37	; 0x25
    2080:	9e a1       	ldd	r25, Y+38	; 0x26
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	2c f4       	brge	.+10     	; 0x209c <main+0x11c>
		__ticks = 1;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9a a3       	std	Y+34, r25	; 0x22
    2098:	89 a3       	std	Y+33, r24	; 0x21
    209a:	3f c0       	rjmp	.+126    	; 0x211a <main+0x19a>
	else if (__tmp > 65535)
    209c:	6b a1       	ldd	r22, Y+35	; 0x23
    209e:	7c a1       	ldd	r23, Y+36	; 0x24
    20a0:	8d a1       	ldd	r24, Y+37	; 0x25
    20a2:	9e a1       	ldd	r25, Y+38	; 0x26
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	4f e7       	ldi	r20, 0x7F	; 127
    20aa:	57 e4       	ldi	r21, 0x47	; 71
    20ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	4c f5       	brge	.+82     	; 0x2106 <main+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b4:	6f a1       	ldd	r22, Y+39	; 0x27
    20b6:	78 a5       	ldd	r23, Y+40	; 0x28
    20b8:	89 a5       	ldd	r24, Y+41	; 0x29
    20ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e2       	ldi	r20, 0x20	; 32
    20c2:	51 e4       	ldi	r21, 0x41	; 65
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9a a3       	std	Y+34, r25	; 0x22
    20da:	89 a3       	std	Y+33, r24	; 0x21
    20dc:	0f c0       	rjmp	.+30     	; 0x20fc <main+0x17c>
    20de:	88 ec       	ldi	r24, 0xC8	; 200
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	98 a3       	std	Y+32, r25	; 0x20
    20e4:	8f 8f       	std	Y+31, r24	; 0x1f
    20e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20e8:	98 a1       	ldd	r25, Y+32	; 0x20
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <main+0x16a>
    20ee:	98 a3       	std	Y+32, r25	; 0x20
    20f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f2:	89 a1       	ldd	r24, Y+33	; 0x21
    20f4:	9a a1       	ldd	r25, Y+34	; 0x22
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	9a a3       	std	Y+34, r25	; 0x22
    20fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	89 a1       	ldd	r24, Y+33	; 0x21
    20fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	69 f7       	brne	.-38     	; 0x20de <main+0x15e>
    2104:	14 c0       	rjmp	.+40     	; 0x212e <main+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2106:	6b a1       	ldd	r22, Y+35	; 0x23
    2108:	7c a1       	ldd	r23, Y+36	; 0x24
    210a:	8d a1       	ldd	r24, Y+37	; 0x25
    210c:	9e a1       	ldd	r25, Y+38	; 0x26
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9a a3       	std	Y+34, r25	; 0x22
    2118:	89 a3       	std	Y+33, r24	; 0x21
    211a:	89 a1       	ldd	r24, Y+33	; 0x21
    211c:	9a a1       	ldd	r25, Y+34	; 0x22
    211e:	9e 8f       	std	Y+30, r25	; 0x1e
    2120:	8d 8f       	std	Y+29, r24	; 0x1d
    2122:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2124:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <main+0x1a6>
    212a:	9e 8f       	std	Y+30, r25	; 0x1e
    212c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			if (match == 1) {//case password matched
    212e:	80 91 86 00 	lds	r24, 0x0086
    2132:	81 30       	cpi	r24, 0x01	; 1
    2134:	79 f5       	brne	.+94     	; 0x2194 <main+0x214>
				Timer0_Init(&timer0_config);//initialize Timer0
    2136:	88 e6       	ldi	r24, 0x68	; 104
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <Timer0_Init>
				DcMotor_rotate(CW);//rotate motor CW for  15 seconds
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <DcMotor_rotate>
				while (Tick != DOOR_OPEN);
    2144:	80 91 76 00 	lds	r24, 0x0076
    2148:	90 91 77 00 	lds	r25, 0x0077
    214c:	e3 e0       	ldi	r30, 0x03	; 3
    214e:	86 39       	cpi	r24, 0x96	; 150
    2150:	9e 07       	cpc	r25, r30
    2152:	c1 f7       	brne	.-16     	; 0x2144 <main+0x1c4>
				DcMotor_rotate(STOP);
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <DcMotor_rotate>
				while (Tick != DOOR_HOLD);//hold motor for 3 seconds
    215a:	80 91 76 00 	lds	r24, 0x0076
    215e:	90 91 77 00 	lds	r25, 0x0077
    2162:	f4 e0       	ldi	r31, 0x04	; 4
    2164:	8e 34       	cpi	r24, 0x4E	; 78
    2166:	9f 07       	cpc	r25, r31
    2168:	c1 f7       	brne	.-16     	; 0x215a <main+0x1da>
				DcMotor_rotate(CCW);
    216a:	82 e0       	ldi	r24, 0x02	; 2
    216c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <DcMotor_rotate>
				while (Tick != DOOR_CLOSE);//rotate motor CCW for  15 seconds
    2170:	80 91 76 00 	lds	r24, 0x0076
    2174:	90 91 77 00 	lds	r25, 0x0077
    2178:	27 e0       	ldi	r18, 0x07	; 7
    217a:	84 3e       	cpi	r24, 0xE4	; 228
    217c:	92 07       	cpc	r25, r18
    217e:	c1 f7       	brne	.-16     	; 0x2170 <main+0x1f0>
				DcMotor_rotate(STOP);//Stop Motor
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <DcMotor_rotate>
				Timer0_Deint();//close Timer 0
    2186:	0e 94 ab 12 	call	0x2556	; 0x2556 <Timer0_Deint>
				Tick = 0;
    218a:	10 92 77 00 	sts	0x0077, r1
    218e:	10 92 76 00 	sts	0x0076, r1
    2192:	45 cf       	rjmp	.-374    	; 0x201e <main+0x9e>
				break;
			}

			else if (match == 0) {//case entered wrong password 3 times
    2194:	80 91 86 00 	lds	r24, 0x0086
    2198:	88 23       	and	r24, r24
    219a:	09 f0       	breq	.+2      	; 0x219e <main+0x21e>
    219c:	40 cf       	rjmp	.-384    	; 0x201e <main+0x9e>
				Timer0_Init(&timer0_config);//initialize timer 0
    219e:	88 e6       	ldi	r24, 0x68	; 104
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <Timer0_Init>
				BUZZER_on();//turn on buzz for 1 minute
    21a6:	0e 94 af 05 	call	0xb5e	; 0xb5e <BUZZER_on>
				while (Tick != BUZZER);
    21aa:	80 91 76 00 	lds	r24, 0x0076
    21ae:	90 91 77 00 	lds	r25, 0x0077
    21b2:	3e e0       	ldi	r19, 0x0E	; 14
    21b4:	8e 34       	cpi	r24, 0x4E	; 78
    21b6:	93 07       	cpc	r25, r19
    21b8:	c1 f7       	brne	.-16     	; 0x21aa <main+0x22a>
				BUZZER_off();//turn off buzz
    21ba:	0e 94 bb 05 	call	0xb76	; 0xb76 <BUZZER_off>
				Timer0_Deint();
    21be:	0e 94 ab 12 	call	0x2556	; 0x2556 <Timer0_Deint>
				Tick = 0;
    21c2:	10 92 77 00 	sts	0x0077, r1
    21c6:	10 92 76 00 	sts	0x0076, r1
    21ca:	29 cf       	rjmp	.-430    	; 0x201e <main+0x9e>

			}
			break;
		}
		case '-': {//case of password change
			checkForPassword2();//compare the password with one taken from UART
    21cc:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <checkForPassword2>
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a8 ec       	ldi	r26, 0xC8	; 200
    21d6:	b2 e4       	ldi	r27, 0x42	; 66
    21d8:	89 8f       	std	Y+25, r24	; 0x19
    21da:	9a 8f       	std	Y+26, r25	; 0x1a
    21dc:	ab 8f       	std	Y+27, r26	; 0x1b
    21de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e0:	69 8d       	ldd	r22, Y+25	; 0x19
    21e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	4a ef       	ldi	r20, 0xFA	; 250
    21ee:	54 e4       	ldi	r21, 0x44	; 68
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	8d 8b       	std	Y+21, r24	; 0x15
    21fa:	9e 8b       	std	Y+22, r25	; 0x16
    21fc:	af 8b       	std	Y+23, r26	; 0x17
    21fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2200:	6d 89       	ldd	r22, Y+21	; 0x15
    2202:	7e 89       	ldd	r23, Y+22	; 0x16
    2204:	8f 89       	ldd	r24, Y+23	; 0x17
    2206:	98 8d       	ldd	r25, Y+24	; 0x18
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e8       	ldi	r20, 0x80	; 128
    220e:	5f e3       	ldi	r21, 0x3F	; 63
    2210:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2214:	88 23       	and	r24, r24
    2216:	2c f4       	brge	.+10     	; 0x2222 <main+0x2a2>
		__ticks = 1;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9c 8b       	std	Y+20, r25	; 0x14
    221e:	8b 8b       	std	Y+19, r24	; 0x13
    2220:	3f c0       	rjmp	.+126    	; 0x22a0 <main+0x320>
	else if (__tmp > 65535)
    2222:	6d 89       	ldd	r22, Y+21	; 0x15
    2224:	7e 89       	ldd	r23, Y+22	; 0x16
    2226:	8f 89       	ldd	r24, Y+23	; 0x17
    2228:	98 8d       	ldd	r25, Y+24	; 0x18
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	3f ef       	ldi	r19, 0xFF	; 255
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	57 e4       	ldi	r21, 0x47	; 71
    2232:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2236:	18 16       	cp	r1, r24
    2238:	4c f5       	brge	.+82     	; 0x228c <main+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223a:	69 8d       	ldd	r22, Y+25	; 0x19
    223c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    223e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2240:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e2       	ldi	r20, 0x20	; 32
    2248:	51 e4       	ldi	r21, 0x41	; 65
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	9c 8b       	std	Y+20, r25	; 0x14
    2260:	8b 8b       	std	Y+19, r24	; 0x13
    2262:	0f c0       	rjmp	.+30     	; 0x2282 <main+0x302>
    2264:	88 ec       	ldi	r24, 0xC8	; 200
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9a 8b       	std	Y+18, r25	; 0x12
    226a:	89 8b       	std	Y+17, r24	; 0x11
    226c:	89 89       	ldd	r24, Y+17	; 0x11
    226e:	9a 89       	ldd	r25, Y+18	; 0x12
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <main+0x2f0>
    2274:	9a 8b       	std	Y+18, r25	; 0x12
    2276:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2278:	8b 89       	ldd	r24, Y+19	; 0x13
    227a:	9c 89       	ldd	r25, Y+20	; 0x14
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	9c 8b       	std	Y+20, r25	; 0x14
    2280:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2282:	8b 89       	ldd	r24, Y+19	; 0x13
    2284:	9c 89       	ldd	r25, Y+20	; 0x14
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	69 f7       	brne	.-38     	; 0x2264 <main+0x2e4>
    228a:	14 c0       	rjmp	.+40     	; 0x22b4 <main+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228c:	6d 89       	ldd	r22, Y+21	; 0x15
    228e:	7e 89       	ldd	r23, Y+22	; 0x16
    2290:	8f 89       	ldd	r24, Y+23	; 0x17
    2292:	98 8d       	ldd	r25, Y+24	; 0x18
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9c 8b       	std	Y+20, r25	; 0x14
    229e:	8b 8b       	std	Y+19, r24	; 0x13
    22a0:	8b 89       	ldd	r24, Y+19	; 0x13
    22a2:	9c 89       	ldd	r25, Y+20	; 0x14
    22a4:	98 8b       	std	Y+16, r25	; 0x10
    22a6:	8f 87       	std	Y+15, r24	; 0x0f
    22a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22aa:	98 89       	ldd	r25, Y+16	; 0x10
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <main+0x32c>
    22b0:	98 8b       	std	Y+16, r25	; 0x10
    22b2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			if (match == 1) {
    22b4:	80 91 86 00 	lds	r24, 0x0086
    22b8:	81 30       	cpi	r24, 0x01	; 1
    22ba:	09 f0       	breq	.+2      	; 0x22be <main+0x33e>
    22bc:	7b c0       	rjmp	.+246    	; 0x23b4 <main+0x434>
				UART_receiveString(recievedPassword);//take entered password by UART
    22be:	8f e7       	ldi	r24, 0x7F	; 127
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	0e 94 1f 14 	call	0x283e	; 0x283e <UART_receiveString>
				savePassword(recievedPassword);//save new password in EEPROM
    22c6:	8f e7       	ldi	r24, 0x7F	; 127
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <savePassword>
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	a8 ec       	ldi	r26, 0xC8	; 200
    22d4:	b2 e4       	ldi	r27, 0x42	; 66
    22d6:	8b 87       	std	Y+11, r24	; 0x0b
    22d8:	9c 87       	std	Y+12, r25	; 0x0c
    22da:	ad 87       	std	Y+13, r26	; 0x0d
    22dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22de:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	4a ef       	ldi	r20, 0xFA	; 250
    22ec:	54 e4       	ldi	r21, 0x44	; 68
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	8f 83       	std	Y+7, r24	; 0x07
    22f8:	98 87       	std	Y+8, r25	; 0x08
    22fa:	a9 87       	std	Y+9, r26	; 0x09
    22fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2300:	78 85       	ldd	r23, Y+8	; 0x08
    2302:	89 85       	ldd	r24, Y+9	; 0x09
    2304:	9a 85       	ldd	r25, Y+10	; 0x0a
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e8       	ldi	r20, 0x80	; 128
    230c:	5f e3       	ldi	r21, 0x3F	; 63
    230e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2312:	88 23       	and	r24, r24
    2314:	2c f4       	brge	.+10     	; 0x2320 <main+0x3a0>
		__ticks = 1;
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	9e 83       	std	Y+6, r25	; 0x06
    231c:	8d 83       	std	Y+5, r24	; 0x05
    231e:	3f c0       	rjmp	.+126    	; 0x239e <main+0x41e>
	else if (__tmp > 65535)
    2320:	6f 81       	ldd	r22, Y+7	; 0x07
    2322:	78 85       	ldd	r23, Y+8	; 0x08
    2324:	89 85       	ldd	r24, Y+9	; 0x09
    2326:	9a 85       	ldd	r25, Y+10	; 0x0a
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	3f ef       	ldi	r19, 0xFF	; 255
    232c:	4f e7       	ldi	r20, 0x7F	; 127
    232e:	57 e4       	ldi	r21, 0x47	; 71
    2330:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2334:	18 16       	cp	r1, r24
    2336:	4c f5       	brge	.+82     	; 0x238a <main+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2338:	6b 85       	ldd	r22, Y+11	; 0x0b
    233a:	7c 85       	ldd	r23, Y+12	; 0x0c
    233c:	8d 85       	ldd	r24, Y+13	; 0x0d
    233e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e2       	ldi	r20, 0x20	; 32
    2346:	51 e4       	ldi	r21, 0x41	; 65
    2348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	bc 01       	movw	r22, r24
    2352:	cd 01       	movw	r24, r26
    2354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	9e 83       	std	Y+6, r25	; 0x06
    235e:	8d 83       	std	Y+5, r24	; 0x05
    2360:	0f c0       	rjmp	.+30     	; 0x2380 <main+0x400>
    2362:	88 ec       	ldi	r24, 0xC8	; 200
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	9c 83       	std	Y+4, r25	; 0x04
    2368:	8b 83       	std	Y+3, r24	; 0x03
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	9c 81       	ldd	r25, Y+4	; 0x04
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	f1 f7       	brne	.-4      	; 0x236e <main+0x3ee>
    2372:	9c 83       	std	Y+4, r25	; 0x04
    2374:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2376:	8d 81       	ldd	r24, Y+5	; 0x05
    2378:	9e 81       	ldd	r25, Y+6	; 0x06
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	9e 83       	std	Y+6, r25	; 0x06
    237e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	69 f7       	brne	.-38     	; 0x2362 <main+0x3e2>
    2388:	4a ce       	rjmp	.-876    	; 0x201e <main+0x9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238a:	6f 81       	ldd	r22, Y+7	; 0x07
    238c:	78 85       	ldd	r23, Y+8	; 0x08
    238e:	89 85       	ldd	r24, Y+9	; 0x09
    2390:	9a 85       	ldd	r25, Y+10	; 0x0a
    2392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	9a 83       	std	Y+2, r25	; 0x02
    23a4:	89 83       	std	Y+1, r24	; 0x01
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	9a 81       	ldd	r25, Y+2	; 0x02
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <main+0x42a>
    23ae:	9a 83       	std	Y+2, r25	; 0x02
    23b0:	89 83       	std	Y+1, r24	; 0x01
    23b2:	35 ce       	rjmp	.-918    	; 0x201e <main+0x9e>
				_delay_ms(100);
				break;
			}

			else if (match == 0) {//case entered wrong password 3 times
    23b4:	80 91 86 00 	lds	r24, 0x0086
    23b8:	88 23       	and	r24, r24
    23ba:	09 f0       	breq	.+2      	; 0x23be <main+0x43e>
    23bc:	30 ce       	rjmp	.-928    	; 0x201e <main+0x9e>
				Timer0_Init(&timer0_config);//initialize timer 0
    23be:	88 e6       	ldi	r24, 0x68	; 104
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <Timer0_Init>
				BUZZER_on();//turn on buzz for 1 minute
    23c6:	0e 94 af 05 	call	0xb5e	; 0xb5e <BUZZER_on>
				while (Tick != BUZZER);
    23ca:	80 91 76 00 	lds	r24, 0x0076
    23ce:	90 91 77 00 	lds	r25, 0x0077
    23d2:	ee e0       	ldi	r30, 0x0E	; 14
    23d4:	8e 34       	cpi	r24, 0x4E	; 78
    23d6:	9e 07       	cpc	r25, r30
    23d8:	c1 f7       	brne	.-16     	; 0x23ca <main+0x44a>
				BUZZER_off();//turn off buzz
    23da:	0e 94 bb 05 	call	0xb76	; 0xb76 <BUZZER_off>
				Timer0_Deint();
    23de:	0e 94 ab 12 	call	0x2556	; 0x2556 <Timer0_Deint>
				Tick = 0;
    23e2:	10 92 77 00 	sts	0x0077, r1
    23e6:	10 92 76 00 	sts	0x0076, r1
    23ea:	19 ce       	rjmp	.-974    	; 0x201e <main+0x9e>

000023ec <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    23ec:	1f 92       	push	r1
    23ee:	0f 92       	push	r0
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	0f 92       	push	r0
    23f4:	11 24       	eor	r1, r1
    23f6:	2f 93       	push	r18
    23f8:	3f 93       	push	r19
    23fa:	4f 93       	push	r20
    23fc:	5f 93       	push	r21
    23fe:	6f 93       	push	r22
    2400:	7f 93       	push	r23
    2402:	8f 93       	push	r24
    2404:	9f 93       	push	r25
    2406:	af 93       	push	r26
    2408:	bf 93       	push	r27
    240a:	ef 93       	push	r30
    240c:	ff 93       	push	r31
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2416:	80 91 78 00 	lds	r24, 0x0078
    241a:	90 91 79 00 	lds	r25, 0x0079
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	29 f0       	breq	.+10     	; 0x242c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after OVF is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2422:	e0 91 78 00 	lds	r30, 0x0078
    2426:	f0 91 79 00 	lds	r31, 0x0079
    242a:	09 95       	icall
	}
}
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	ff 91       	pop	r31
    2432:	ef 91       	pop	r30
    2434:	bf 91       	pop	r27
    2436:	af 91       	pop	r26
    2438:	9f 91       	pop	r25
    243a:	8f 91       	pop	r24
    243c:	7f 91       	pop	r23
    243e:	6f 91       	pop	r22
    2440:	5f 91       	pop	r21
    2442:	4f 91       	pop	r20
    2444:	3f 91       	pop	r19
    2446:	2f 91       	pop	r18
    2448:	0f 90       	pop	r0
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	0f 90       	pop	r0
    244e:	1f 90       	pop	r1
    2450:	18 95       	reti

00002452 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    2452:	1f 92       	push	r1
    2454:	0f 92       	push	r0
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	0f 92       	push	r0
    245a:	11 24       	eor	r1, r1
    245c:	2f 93       	push	r18
    245e:	3f 93       	push	r19
    2460:	4f 93       	push	r20
    2462:	5f 93       	push	r21
    2464:	6f 93       	push	r22
    2466:	7f 93       	push	r23
    2468:	8f 93       	push	r24
    246a:	9f 93       	push	r25
    246c:	af 93       	push	r26
    246e:	bf 93       	push	r27
    2470:	ef 93       	push	r30
    2472:	ff 93       	push	r31
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    247c:	80 91 78 00 	lds	r24, 0x0078
    2480:	90 91 79 00 	lds	r25, 0x0079
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	29 f0       	breq	.+10     	; 0x2492 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application COMP is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2488:	e0 91 78 00 	lds	r30, 0x0078
    248c:	f0 91 79 00 	lds	r31, 0x0079
    2490:	09 95       	icall
	}
}
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	ff 91       	pop	r31
    2498:	ef 91       	pop	r30
    249a:	bf 91       	pop	r27
    249c:	af 91       	pop	r26
    249e:	9f 91       	pop	r25
    24a0:	8f 91       	pop	r24
    24a2:	7f 91       	pop	r23
    24a4:	6f 91       	pop	r22
    24a6:	5f 91       	pop	r21
    24a8:	4f 91       	pop	r20
    24aa:	3f 91       	pop	r19
    24ac:	2f 91       	pop	r18
    24ae:	0f 90       	pop	r0
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	0f 90       	pop	r0
    24b4:	1f 90       	pop	r1
    24b6:	18 95       	reti

000024b8 <Timer0_Init>:
 * this is a function that is used to initialize Timer0
 * Timer0 could be initialized in compare mode or in over flow mode
 * we can determine the required frequency on which timer operate by using prescaler
 */
void Timer0_Init(const Timer0_ConfigType * Config_Ptr)
{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	00 d0       	rcall	.+0      	; 0x24be <Timer0_Init+0x6>
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Config_Ptr->initialValue; //Set Timer initial value to 0
    24c6:	a2 e5       	ldi	r26, 0x52	; 82
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e9 81       	ldd	r30, Y+1	; 0x01
    24cc:	fa 81       	ldd	r31, Y+2	; 0x02
    24ce:	82 81       	ldd	r24, Z+2	; 0x02
    24d0:	93 81       	ldd	r25, Z+3	; 0x03
    24d2:	8c 93       	st	X, r24
	TIMSK |= (1<<TOIE0)|(1<<OCIE0); // Enable Timer0 Overflow Interrupt and Timer0 compare Interrupt
    24d4:	a9 e5       	ldi	r26, 0x59	; 89
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e9 e5       	ldi	r30, 0x59	; 89
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	83 60       	ori	r24, 0x03	; 3
    24e0:	8c 93       	st	X, r24
	OCR0  = Config_Ptr->compValue; // Set Compare Value
    24e2:	ac e5       	ldi	r26, 0x5C	; 92
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	e9 81       	ldd	r30, Y+1	; 0x01
    24e8:	fa 81       	ldd	r31, Y+2	; 0x02
    24ea:	84 81       	ldd	r24, Z+4	; 0x04
    24ec:	95 81       	ldd	r25, Z+5	; 0x05
    24ee:	8c 93       	st	X, r24
	/* Configure the timer control register
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 */
	TCCR0 = (1<<FOC0);
    24f0:	e3 e5       	ldi	r30, 0x53	; 83
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 e8       	ldi	r24, 0x80	; 128
    24f6:	80 83       	st	Z, r24
	TCCR0=(TCCR0&0XF8)|Config_Ptr->prescaler;//determine the used prescaler
    24f8:	a3 e5       	ldi	r26, 0x53	; 83
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e3 e5       	ldi	r30, 0x53	; 83
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	98 2f       	mov	r25, r24
    2504:	98 7f       	andi	r25, 0xF8	; 248
    2506:	e9 81       	ldd	r30, Y+1	; 0x01
    2508:	fa 81       	ldd	r31, Y+2	; 0x02
    250a:	80 81       	ld	r24, Z
    250c:	89 2b       	or	r24, r25
    250e:	8c 93       	st	X, r24
	TCCR0=(TCCR0&0XF7)|Config_Ptr->mode;//determine operation by OVF mode or Compare mode
    2510:	a3 e5       	ldi	r26, 0x53	; 83
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e3 e5       	ldi	r30, 0x53	; 83
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	98 2f       	mov	r25, r24
    251c:	97 7f       	andi	r25, 0xF7	; 247
    251e:	e9 81       	ldd	r30, Y+1	; 0x01
    2520:	fa 81       	ldd	r31, Y+2	; 0x02
    2522:	81 81       	ldd	r24, Z+1	; 0x01
    2524:	89 2b       	or	r24, r25
    2526:	8c 93       	st	X, r24

}
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <Timer0_setCallBack>:

/*Description:
 *Function to set the Call Back function address.
 */
void Timer0_setCallBack(void(*a_ptr)(void))
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	00 d0       	rcall	.+0      	; 0x2538 <Timer0_setCallBack+0x6>
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	9a 83       	std	Y+2, r25	; 0x02
    253e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	9a 81       	ldd	r25, Y+2	; 0x02
    2544:	90 93 79 00 	sts	0x0079, r25
    2548:	80 93 78 00 	sts	0x0078, r24
}
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <Timer0_Deint>:
/*Description:
 *Function to disable the Timer0 to stop Timer0
 */
void Timer0_Deint(void)
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
TCCR0=0;
    255e:	e3 e5       	ldi	r30, 0x53	; 83
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	10 82       	st	Z, r1
TCNT0=0;
    2564:	e2 e5       	ldi	r30, 0x52	; 82
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	10 82       	st	Z, r1
}
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	00 d0       	rcall	.+0      	; 0x2576 <TWI_init+0x6>
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using configurable  pre-scaler  and F_CPU=8Mhz */
    TWBR = 0x02;
    257e:	e0 e2       	ldi	r30, 0x20	; 32
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	82 e0       	ldi	r24, 0x02	; 2
    2584:	80 83       	st	Z, r24
	TWSR = Config_Ptr->prescaler;
    2586:	a1 e2       	ldi	r26, 0x21	; 33
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e9 81       	ldd	r30, Y+1	; 0x01
    258c:	fa 81       	ldd	r31, Y+2	; 0x02
    258e:	80 81       	ld	r24, Z
    2590:	8c 93       	st	X, r24

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->deviceAddress)<<1; // my address
    2592:	a2 e2       	ldi	r26, 0x22	; 34
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e9 81       	ldd	r30, Y+1	; 0x01
    2598:	fa 81       	ldd	r31, Y+2	; 0x02
    259a:	81 81       	ldd	r24, Z+1	; 0x01
    259c:	88 0f       	add	r24, r24
    259e:	8c 93       	st	X, r24
    TWCR = (1<<TWEN); /* enable TWI */
    25a0:	e6 e5       	ldi	r30, 0x56	; 86
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	84 e0       	ldi	r24, 0x04	; 4
    25a6:	80 83       	st	Z, r24
}
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <TWI_start>:

void TWI_start(void)
{
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    25ba:	e6 e5       	ldi	r30, 0x56	; 86
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	84 ea       	ldi	r24, 0xA4	; 164
    25c0:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    25c2:	e6 e5       	ldi	r30, 0x56	; 86
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	88 23       	and	r24, r24
    25ca:	dc f7       	brge	.-10     	; 0x25c2 <TWI_start+0x10>
}
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <TWI_stop>:

void TWI_stop(void)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    25da:	e6 e5       	ldi	r30, 0x56	; 86
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	84 e9       	ldi	r24, 0x94	; 148
    25e0:	80 83       	st	Z, r24
}
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	0f 92       	push	r0
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    25f4:	e3 e2       	ldi	r30, 0x23	; 35
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    25fc:	e6 e5       	ldi	r30, 0x56	; 86
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	84 e8       	ldi	r24, 0x84	; 132
    2602:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2604:	e6 e5       	ldi	r30, 0x56	; 86
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	88 23       	and	r24, r24
    260c:	dc f7       	brge	.-10     	; 0x2604 <TWI_writeByte+0x1c>
}
    260e:	0f 90       	pop	r0
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    261e:	e6 e5       	ldi	r30, 0x56	; 86
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	84 ec       	ldi	r24, 0xC4	; 196
    2624:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2626:	e6 e5       	ldi	r30, 0x56	; 86
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	88 23       	and	r24, r24
    262e:	dc f7       	brge	.-10     	; 0x2626 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2630:	e3 e2       	ldi	r30, 0x23	; 35
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
}
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2644:	e6 e5       	ldi	r30, 0x56	; 86
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	84 e8       	ldi	r24, 0x84	; 132
    264a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    264c:	e6 e5       	ldi	r30, 0x56	; 86
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	88 23       	and	r24, r24
    2654:	dc f7       	brge	.-10     	; 0x264c <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2656:	e3 e2       	ldi	r30, 0x23	; 35
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
}
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	0f 92       	push	r0
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    266c:	e1 e2       	ldi	r30, 0x21	; 33
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	88 7f       	andi	r24, 0xF8	; 248
    2674:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2676:	89 81       	ldd	r24, Y+1	; 0x01
}
    2678:	0f 90       	pop	r0
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	00 d0       	rcall	.+0      	; 0x2686 <UART_init+0x6>
    2686:	00 d0       	rcall	.+0      	; 0x2688 <UART_init+0x8>
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	9c 83       	std	Y+4, r25	; 0x04
    268e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2690:	1a 82       	std	Y+2, r1	; 0x02
    2692:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2694:	eb e2       	ldi	r30, 0x2B	; 43
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    269c:	ea e2       	ldi	r30, 0x2A	; 42
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	88 e1       	ldi	r24, 0x18	; 24
    26a2:	80 83       	st	Z, r24
	UCSRB=(UCSRB&0XFB)|(((Config_Ptr->charSize)&0X04));//decide number of data bits
    26a4:	aa e2       	ldi	r26, 0x2A	; 42
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	ea e2       	ldi	r30, 0x2A	; 42
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	98 2f       	mov	r25, r24
    26b0:	9b 7f       	andi	r25, 0xFB	; 251
    26b2:	eb 81       	ldd	r30, Y+3	; 0x03
    26b4:	fc 81       	ldd	r31, Y+4	; 0x04
    26b6:	81 81       	ldd	r24, Z+1	; 0x01
    26b8:	84 70       	andi	r24, 0x04	; 4
    26ba:	89 2b       	or	r24, r25
    26bc:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) ;
    26be:	e0 e4       	ldi	r30, 0x40	; 64
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 e8       	ldi	r24, 0x80	; 128
    26c4:	80 83       	st	Z, r24
	UCSRC=(UCSRC&0XCF)|((Config_Ptr->parityMode)<<4);//determine type of parity
    26c6:	a0 e4       	ldi	r26, 0x40	; 64
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e0 e4       	ldi	r30, 0x40	; 64
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	28 2f       	mov	r18, r24
    26d2:	2f 7c       	andi	r18, 0xCF	; 207
    26d4:	eb 81       	ldd	r30, Y+3	; 0x03
    26d6:	fc 81       	ldd	r31, Y+4	; 0x04
    26d8:	86 81       	ldd	r24, Z+6	; 0x06
    26da:	88 2f       	mov	r24, r24
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	82 95       	swap	r24
    26e0:	92 95       	swap	r25
    26e2:	90 7f       	andi	r25, 0xF0	; 240
    26e4:	98 27       	eor	r25, r24
    26e6:	80 7f       	andi	r24, 0xF0	; 240
    26e8:	98 27       	eor	r25, r24
    26ea:	82 2b       	or	r24, r18
    26ec:	8c 93       	st	X, r24

	UCSRC=(UCSRC &0XF7 )|((Config_Ptr->stopBit)<<3);//decide the number of stop bits
    26ee:	a0 e4       	ldi	r26, 0x40	; 64
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	e0 e4       	ldi	r30, 0x40	; 64
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 81       	ld	r24, Z
    26f8:	28 2f       	mov	r18, r24
    26fa:	27 7f       	andi	r18, 0xF7	; 247
    26fc:	eb 81       	ldd	r30, Y+3	; 0x03
    26fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2700:	80 81       	ld	r24, Z
    2702:	88 2f       	mov	r24, r24
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	88 0f       	add	r24, r24
    2708:	99 1f       	adc	r25, r25
    270a:	88 0f       	add	r24, r24
    270c:	99 1f       	adc	r25, r25
    270e:	88 0f       	add	r24, r24
    2710:	99 1f       	adc	r25, r25
    2712:	82 2b       	or	r24, r18
    2714:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0XF9)|(((Config_Ptr->charSize)&0X03)<<1);//decide number of data
    2716:	a0 e4       	ldi	r26, 0x40	; 64
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e0 e4       	ldi	r30, 0x40	; 64
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	28 2f       	mov	r18, r24
    2722:	29 7f       	andi	r18, 0xF9	; 249
    2724:	eb 81       	ldd	r30, Y+3	; 0x03
    2726:	fc 81       	ldd	r31, Y+4	; 0x04
    2728:	81 81       	ldd	r24, Z+1	; 0x01
    272a:	88 2f       	mov	r24, r24
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	83 70       	andi	r24, 0x03	; 3
    2730:	90 70       	andi	r25, 0x00	; 0
    2732:	88 0f       	add	r24, r24
    2734:	99 1f       	adc	r25, r25
    2736:	82 2b       	or	r24, r18
    2738:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baudRate * 8UL))) - 1);
    273a:	eb 81       	ldd	r30, Y+3	; 0x03
    273c:	fc 81       	ldd	r31, Y+4	; 0x04
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	a4 81       	ldd	r26, Z+4	; 0x04
    2744:	b5 81       	ldd	r27, Z+5	; 0x05
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	aa 1f       	adc	r26, r26
    274c:	bb 1f       	adc	r27, r27
    274e:	88 0f       	add	r24, r24
    2750:	99 1f       	adc	r25, r25
    2752:	aa 1f       	adc	r26, r26
    2754:	bb 1f       	adc	r27, r27
    2756:	88 0f       	add	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	aa 1f       	adc	r26, r26
    275c:	bb 1f       	adc	r27, r27
    275e:	9c 01       	movw	r18, r24
    2760:	ad 01       	movw	r20, r26
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	92 e1       	ldi	r25, 0x12	; 18
    2766:	aa e7       	ldi	r26, 0x7A	; 122
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	bc 01       	movw	r22, r24
    276c:	cd 01       	movw	r24, r26
    276e:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__udivmodsi4>
    2772:	da 01       	movw	r26, r20
    2774:	c9 01       	movw	r24, r18
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	9a 83       	std	Y+2, r25	; 0x02
    277a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    277c:	e0 e4       	ldi	r30, 0x40	; 64
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	9a 81       	ldd	r25, Y+2	; 0x02
    2784:	89 2f       	mov	r24, r25
    2786:	99 27       	eor	r25, r25
    2788:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    278a:	e9 e2       	ldi	r30, 0x29	; 41
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	80 83       	st	Z, r24
}
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	08 95       	ret

000027a0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	0f 92       	push	r0
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    27ac:	eb e2       	ldi	r30, 0x2B	; 43
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	88 2f       	mov	r24, r24
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	80 72       	andi	r24, 0x20	; 32
    27b8:	90 70       	andi	r25, 0x00	; 0
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	b9 f3       	breq	.-18     	; 0x27ac <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    27be:	ec e2       	ldi	r30, 0x2C	; 44
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    27c6:	0f 90       	pop	r0
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	08 95       	ret

000027ce <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    27d6:	eb e2       	ldi	r30, 0x2B	; 43
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	88 23       	and	r24, r24
    27de:	dc f7       	brge	.-10     	; 0x27d6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    27e0:	ec e2       	ldi	r30, 0x2C	; 44
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
}
    27e6:	cf 91       	pop	r28
    27e8:	df 91       	pop	r29
    27ea:	08 95       	ret

000027ec <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    27ec:	df 93       	push	r29
    27ee:	cf 93       	push	r28
    27f0:	00 d0       	rcall	.+0      	; 0x27f2 <UART_sendString+0x6>
    27f2:	0f 92       	push	r0
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	9b 83       	std	Y+3, r25	; 0x03
    27fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27fc:	19 82       	std	Y+1, r1	; 0x01
    27fe:	0e c0       	rjmp	.+28     	; 0x281c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	28 2f       	mov	r18, r24
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	8a 81       	ldd	r24, Y+2	; 0x02
    2808:	9b 81       	ldd	r25, Y+3	; 0x03
    280a:	fc 01       	movw	r30, r24
    280c:	e2 0f       	add	r30, r18
    280e:	f3 1f       	adc	r31, r19
    2810:	80 81       	ld	r24, Z
    2812:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <UART_sendByte>
		i++;
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	8f 5f       	subi	r24, 0xFF	; 255
    281a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	28 2f       	mov	r18, r24
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	9b 81       	ldd	r25, Y+3	; 0x03
    2826:	fc 01       	movw	r30, r24
    2828:	e2 0f       	add	r30, r18
    282a:	f3 1f       	adc	r31, r19
    282c:	80 81       	ld	r24, Z
    282e:	88 23       	and	r24, r24
    2830:	39 f7       	brne	.-50     	; 0x2800 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    283e:	0f 93       	push	r16
    2840:	1f 93       	push	r17
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	00 d0       	rcall	.+0      	; 0x2848 <UART_receiveString+0xa>
    2848:	0f 92       	push	r0
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	9b 83       	std	Y+3, r25	; 0x03
    2850:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2852:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	28 2f       	mov	r18, r24
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	8a 81       	ldd	r24, Y+2	; 0x02
    285c:	9b 81       	ldd	r25, Y+3	; 0x03
    285e:	8c 01       	movw	r16, r24
    2860:	02 0f       	add	r16, r18
    2862:	13 1f       	adc	r17, r19
    2864:	0e 94 e7 13 	call	0x27ce	; 0x27ce <UART_recieveByte>
    2868:	f8 01       	movw	r30, r16
    286a:	80 83       	st	Z, r24
    286c:	0f c0       	rjmp	.+30     	; 0x288c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	8f 5f       	subi	r24, 0xFF	; 255
    2872:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	28 2f       	mov	r18, r24
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	9b 81       	ldd	r25, Y+3	; 0x03
    287e:	8c 01       	movw	r16, r24
    2880:	02 0f       	add	r16, r18
    2882:	13 1f       	adc	r17, r19
    2884:	0e 94 e7 13 	call	0x27ce	; 0x27ce <UART_recieveByte>
    2888:	f8 01       	movw	r30, r16
    288a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    288c:	89 81       	ldd	r24, Y+1	; 0x01
    288e:	28 2f       	mov	r18, r24
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	9b 81       	ldd	r25, Y+3	; 0x03
    2896:	fc 01       	movw	r30, r24
    2898:	e2 0f       	add	r30, r18
    289a:	f3 1f       	adc	r31, r19
    289c:	80 81       	ld	r24, Z
    289e:	83 32       	cpi	r24, 0x23	; 35
    28a0:	31 f7       	brne	.-52     	; 0x286e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	28 2f       	mov	r18, r24
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	9b 81       	ldd	r25, Y+3	; 0x03
    28ac:	fc 01       	movw	r30, r24
    28ae:	e2 0f       	add	r30, r18
    28b0:	f3 1f       	adc	r31, r19
    28b2:	10 82       	st	Z, r1
}
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	1f 91       	pop	r17
    28c0:	0f 91       	pop	r16
    28c2:	08 95       	ret

000028c4 <__udivmodsi4>:
    28c4:	a1 e2       	ldi	r26, 0x21	; 33
    28c6:	1a 2e       	mov	r1, r26
    28c8:	aa 1b       	sub	r26, r26
    28ca:	bb 1b       	sub	r27, r27
    28cc:	fd 01       	movw	r30, r26
    28ce:	0d c0       	rjmp	.+26     	; 0x28ea <__udivmodsi4_ep>

000028d0 <__udivmodsi4_loop>:
    28d0:	aa 1f       	adc	r26, r26
    28d2:	bb 1f       	adc	r27, r27
    28d4:	ee 1f       	adc	r30, r30
    28d6:	ff 1f       	adc	r31, r31
    28d8:	a2 17       	cp	r26, r18
    28da:	b3 07       	cpc	r27, r19
    28dc:	e4 07       	cpc	r30, r20
    28de:	f5 07       	cpc	r31, r21
    28e0:	20 f0       	brcs	.+8      	; 0x28ea <__udivmodsi4_ep>
    28e2:	a2 1b       	sub	r26, r18
    28e4:	b3 0b       	sbc	r27, r19
    28e6:	e4 0b       	sbc	r30, r20
    28e8:	f5 0b       	sbc	r31, r21

000028ea <__udivmodsi4_ep>:
    28ea:	66 1f       	adc	r22, r22
    28ec:	77 1f       	adc	r23, r23
    28ee:	88 1f       	adc	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	1a 94       	dec	r1
    28f4:	69 f7       	brne	.-38     	; 0x28d0 <__udivmodsi4_loop>
    28f6:	60 95       	com	r22
    28f8:	70 95       	com	r23
    28fa:	80 95       	com	r24
    28fc:	90 95       	com	r25
    28fe:	9b 01       	movw	r18, r22
    2900:	ac 01       	movw	r20, r24
    2902:	bd 01       	movw	r22, r26
    2904:	cf 01       	movw	r24, r30
    2906:	08 95       	ret

00002908 <__prologue_saves__>:
    2908:	2f 92       	push	r2
    290a:	3f 92       	push	r3
    290c:	4f 92       	push	r4
    290e:	5f 92       	push	r5
    2910:	6f 92       	push	r6
    2912:	7f 92       	push	r7
    2914:	8f 92       	push	r8
    2916:	9f 92       	push	r9
    2918:	af 92       	push	r10
    291a:	bf 92       	push	r11
    291c:	cf 92       	push	r12
    291e:	df 92       	push	r13
    2920:	ef 92       	push	r14
    2922:	ff 92       	push	r15
    2924:	0f 93       	push	r16
    2926:	1f 93       	push	r17
    2928:	cf 93       	push	r28
    292a:	df 93       	push	r29
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
    2930:	ca 1b       	sub	r28, r26
    2932:	db 0b       	sbc	r29, r27
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	09 94       	ijmp

00002940 <__epilogue_restores__>:
    2940:	2a 88       	ldd	r2, Y+18	; 0x12
    2942:	39 88       	ldd	r3, Y+17	; 0x11
    2944:	48 88       	ldd	r4, Y+16	; 0x10
    2946:	5f 84       	ldd	r5, Y+15	; 0x0f
    2948:	6e 84       	ldd	r6, Y+14	; 0x0e
    294a:	7d 84       	ldd	r7, Y+13	; 0x0d
    294c:	8c 84       	ldd	r8, Y+12	; 0x0c
    294e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2950:	aa 84       	ldd	r10, Y+10	; 0x0a
    2952:	b9 84       	ldd	r11, Y+9	; 0x09
    2954:	c8 84       	ldd	r12, Y+8	; 0x08
    2956:	df 80       	ldd	r13, Y+7	; 0x07
    2958:	ee 80       	ldd	r14, Y+6	; 0x06
    295a:	fd 80       	ldd	r15, Y+5	; 0x05
    295c:	0c 81       	ldd	r16, Y+4	; 0x04
    295e:	1b 81       	ldd	r17, Y+3	; 0x03
    2960:	aa 81       	ldd	r26, Y+2	; 0x02
    2962:	b9 81       	ldd	r27, Y+1	; 0x01
    2964:	ce 0f       	add	r28, r30
    2966:	d1 1d       	adc	r29, r1
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	ed 01       	movw	r28, r26
    2974:	08 95       	ret

00002976 <itoa>:
    2976:	fb 01       	movw	r30, r22
    2978:	9f 01       	movw	r18, r30
    297a:	e8 94       	clt
    297c:	42 30       	cpi	r20, 0x02	; 2
    297e:	c4 f0       	brlt	.+48     	; 0x29b0 <itoa+0x3a>
    2980:	45 32       	cpi	r20, 0x25	; 37
    2982:	b4 f4       	brge	.+44     	; 0x29b0 <itoa+0x3a>
    2984:	4a 30       	cpi	r20, 0x0A	; 10
    2986:	29 f4       	brne	.+10     	; 0x2992 <itoa+0x1c>
    2988:	97 fb       	bst	r25, 7
    298a:	1e f4       	brtc	.+6      	; 0x2992 <itoa+0x1c>
    298c:	90 95       	com	r25
    298e:	81 95       	neg	r24
    2990:	9f 4f       	sbci	r25, 0xFF	; 255
    2992:	64 2f       	mov	r22, r20
    2994:	77 27       	eor	r23, r23
    2996:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__udivmodhi4>
    299a:	80 5d       	subi	r24, 0xD0	; 208
    299c:	8a 33       	cpi	r24, 0x3A	; 58
    299e:	0c f0       	brlt	.+2      	; 0x29a2 <itoa+0x2c>
    29a0:	89 5d       	subi	r24, 0xD9	; 217
    29a2:	81 93       	st	Z+, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	00 97       	sbiw	r24, 0x00	; 0
    29a8:	a1 f7       	brne	.-24     	; 0x2992 <itoa+0x1c>
    29aa:	16 f4       	brtc	.+4      	; 0x29b0 <itoa+0x3a>
    29ac:	5d e2       	ldi	r21, 0x2D	; 45
    29ae:	51 93       	st	Z+, r21
    29b0:	10 82       	st	Z, r1
    29b2:	c9 01       	movw	r24, r18
    29b4:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <strrev>

000029b8 <strrev>:
    29b8:	dc 01       	movw	r26, r24
    29ba:	fc 01       	movw	r30, r24
    29bc:	67 2f       	mov	r22, r23
    29be:	71 91       	ld	r23, Z+
    29c0:	77 23       	and	r23, r23
    29c2:	e1 f7       	brne	.-8      	; 0x29bc <strrev+0x4>
    29c4:	32 97       	sbiw	r30, 0x02	; 2
    29c6:	04 c0       	rjmp	.+8      	; 0x29d0 <strrev+0x18>
    29c8:	7c 91       	ld	r23, X
    29ca:	6d 93       	st	X+, r22
    29cc:	70 83       	st	Z, r23
    29ce:	62 91       	ld	r22, -Z
    29d0:	ae 17       	cp	r26, r30
    29d2:	bf 07       	cpc	r27, r31
    29d4:	c8 f3       	brcs	.-14     	; 0x29c8 <strrev+0x10>
    29d6:	08 95       	ret

000029d8 <__udivmodhi4>:
    29d8:	aa 1b       	sub	r26, r26
    29da:	bb 1b       	sub	r27, r27
    29dc:	51 e1       	ldi	r21, 0x11	; 17
    29de:	07 c0       	rjmp	.+14     	; 0x29ee <__udivmodhi4_ep>

000029e0 <__udivmodhi4_loop>:
    29e0:	aa 1f       	adc	r26, r26
    29e2:	bb 1f       	adc	r27, r27
    29e4:	a6 17       	cp	r26, r22
    29e6:	b7 07       	cpc	r27, r23
    29e8:	10 f0       	brcs	.+4      	; 0x29ee <__udivmodhi4_ep>
    29ea:	a6 1b       	sub	r26, r22
    29ec:	b7 0b       	sbc	r27, r23

000029ee <__udivmodhi4_ep>:
    29ee:	88 1f       	adc	r24, r24
    29f0:	99 1f       	adc	r25, r25
    29f2:	5a 95       	dec	r21
    29f4:	a9 f7       	brne	.-22     	; 0x29e0 <__udivmodhi4_loop>
    29f6:	80 95       	com	r24
    29f8:	90 95       	com	r25
    29fa:	bc 01       	movw	r22, r24
    29fc:	cd 01       	movw	r24, r26
    29fe:	08 95       	ret

00002a00 <_exit>:
    2a00:	f8 94       	cli

00002a02 <__stop_program>:
    2a02:	ff cf       	rjmp	.-2      	; 0x2a02 <__stop_program>
